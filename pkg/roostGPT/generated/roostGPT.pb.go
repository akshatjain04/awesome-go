// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: roostGPT.proto

package roostGPT

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestAiModelInfo_ModelType int32

const (
	TestAiModelInfo_OPENAI            TestAiModelInfo_ModelType = 0
	TestAiModelInfo_VERTEXAI          TestAiModelInfo_ModelType = 1
	TestAiModelInfo_DBRX              TestAiModelInfo_ModelType = 2
	TestAiModelInfo_AZURE_OPEN_AI     TestAiModelInfo_ModelType = 3
	TestAiModelInfo_OPEN_SOURCE_MODEL TestAiModelInfo_ModelType = 4
	TestAiModelInfo_CLAUDE_AI_MODEL   TestAiModelInfo_ModelType = 5
	TestAiModelInfo_LLAMA_MODEL       TestAiModelInfo_ModelType = 6
	TestAiModelInfo_STAR_CHAT_AI      TestAiModelInfo_ModelType = 7
)

// Enum value maps for TestAiModelInfo_ModelType.
var (
	TestAiModelInfo_ModelType_name = map[int32]string{
		0: "OPENAI",
		1: "VERTEXAI",
		2: "DBRX",
		3: "AZURE_OPEN_AI",
		4: "OPEN_SOURCE_MODEL",
		5: "CLAUDE_AI_MODEL",
		6: "LLAMA_MODEL",
		7: "STAR_CHAT_AI",
	}
	TestAiModelInfo_ModelType_value = map[string]int32{
		"OPENAI":            0,
		"VERTEXAI":          1,
		"DBRX":              2,
		"AZURE_OPEN_AI":     3,
		"OPEN_SOURCE_MODEL": 4,
		"CLAUDE_AI_MODEL":   5,
		"LLAMA_MODEL":       6,
		"STAR_CHAT_AI":      7,
	}
)

func (x TestAiModelInfo_ModelType) Enum() *TestAiModelInfo_ModelType {
	p := new(TestAiModelInfo_ModelType)
	*p = x
	return p
}

func (x TestAiModelInfo_ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestAiModelInfo_ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_roostGPT_proto_enumTypes[0].Descriptor()
}

func (TestAiModelInfo_ModelType) Type() protoreflect.EnumType {
	return &file_roostGPT_proto_enumTypes[0]
}

func (x TestAiModelInfo_ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestAiModelInfo_ModelType.Descriptor instead.
func (TestAiModelInfo_ModelType) EnumDescriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{6, 0}
}

type TestIntegrationInfo_IntegrationType int32

const (
	TestIntegrationInfo_NONE  TestIntegrationInfo_IntegrationType = 0
	TestIntegrationInfo_JIRA  TestIntegrationInfo_IntegrationType = 1
	TestIntegrationInfo_AZURE TestIntegrationInfo_IntegrationType = 2
)

// Enum value maps for TestIntegrationInfo_IntegrationType.
var (
	TestIntegrationInfo_IntegrationType_name = map[int32]string{
		0: "NONE",
		1: "JIRA",
		2: "AZURE",
	}
	TestIntegrationInfo_IntegrationType_value = map[string]int32{
		"NONE":  0,
		"JIRA":  1,
		"AZURE": 2,
	}
)

func (x TestIntegrationInfo_IntegrationType) Enum() *TestIntegrationInfo_IntegrationType {
	p := new(TestIntegrationInfo_IntegrationType)
	*p = x
	return p
}

func (x TestIntegrationInfo_IntegrationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestIntegrationInfo_IntegrationType) Descriptor() protoreflect.EnumDescriptor {
	return file_roostGPT_proto_enumTypes[1].Descriptor()
}

func (TestIntegrationInfo_IntegrationType) Type() protoreflect.EnumType {
	return &file_roostGPT_proto_enumTypes[1]
}

func (x TestIntegrationInfo_IntegrationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestIntegrationInfo_IntegrationType.Descriptor instead.
func (TestIntegrationInfo_IntegrationType) EnumDescriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{14, 0}
}

// Common messages
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_roostGPT_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{0}
}

type TitleKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TitleKeyPair) Reset() {
	*x = TitleKeyPair{}
	mi := &file_roostGPT_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleKeyPair) ProtoMessage() {}

func (x *TitleKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleKeyPair.ProtoReflect.Descriptor instead.
func (*TitleKeyPair) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{1}
}

func (x *TitleKeyPair) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TitleKeyPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type FileContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName    string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FilePath    string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	FileContent string `protobuf:"bytes,3,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (x *FileContent) Reset() {
	*x = FileContent{}
	mi := &file_roostGPT_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileContent) ProtoMessage() {}

func (x *FileContent) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileContent.ProtoReflect.Descriptor instead.
func (*FileContent) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{2}
}

func (x *FileContent) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileContent) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileContent) GetFileContent() string {
	if x != nil {
		return x.FileContent
	}
	return ""
}

type FileConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName    string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileContent string `protobuf:"bytes,2,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (x *FileConfig) Reset() {
	*x = FileConfig{}
	mi := &file_roostGPT_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileConfig) ProtoMessage() {}

func (x *FileConfig) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileConfig.ProtoReflect.Descriptor instead.
func (*FileConfig) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{3}
}

func (x *FileConfig) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileConfig) GetFileContent() string {
	if x != nil {
		return x.FileContent
	}
	return ""
}

// Test related messages
type TestGptEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId          string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ThirdpartyAppId string                 `protobuf:"bytes,3,opt,name=thirdparty_app_id,json=thirdpartyAppId,proto3" json:"thirdparty_app_id,omitempty"`
	TestName        string                 `protobuf:"bytes,4,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	GitInfo         string                 `protobuf:"bytes,5,opt,name=git_info,json=gitInfo,proto3" json:"git_info,omitempty"`
	AiModelInfo     string                 `protobuf:"bytes,6,opt,name=ai_model_info,json=aiModelInfo,proto3" json:"ai_model_info,omitempty"`
	IntegrationInfo string                 `protobuf:"bytes,7,opt,name=integration_info,json=integrationInfo,proto3" json:"integration_info,omitempty"`
	AdditionalInfo  string                 `protobuf:"bytes,8,opt,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
	TriggerEvents   string                 `protobuf:"bytes,9,opt,name=trigger_events,json=triggerEvents,proto3" json:"trigger_events,omitempty"`
	CreatedOn       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	UpdatedOn       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_on,json=updatedOn,proto3" json:"updated_on,omitempty"`
	Deleted         int32                  `protobuf:"varint,12,opt,name=deleted,proto3" json:"deleted,omitempty"`
	TestTimeout     int32                  `protobuf:"varint,13,opt,name=test_timeout,json=testTimeout,proto3" json:"test_timeout,omitempty"`
	WebhookError    string                 `protobuf:"bytes,14,opt,name=webhook_error,json=webhookError,proto3" json:"webhook_error,omitempty"`
	TestFramework   string                 `protobuf:"bytes,15,opt,name=test_framework,json=testFramework,proto3" json:"test_framework,omitempty"`
	GitType         string                 `protobuf:"bytes,16,opt,name=git_type,json=gitType,proto3" json:"git_type,omitempty"`
	SourceRepo      string                 `protobuf:"bytes,17,opt,name=source_repo,json=sourceRepo,proto3" json:"source_repo,omitempty"`
	SourceBranch    string                 `protobuf:"bytes,18,opt,name=source_branch,json=sourceBranch,proto3" json:"source_branch,omitempty"`
	ConnectorIds    string                 `protobuf:"bytes,19,opt,name=connector_ids,json=connectorIds,proto3" json:"connector_ids,omitempty"`
	GitOps          int32                  `protobuf:"varint,20,opt,name=git_ops,json=gitOps,proto3" json:"git_ops,omitempty"`
	Labels          string                 `protobuf:"bytes,21,opt,name=labels,proto3" json:"labels,omitempty"`
	TestSource      string                 `protobuf:"bytes,22,opt,name=test_source,json=testSource,proto3" json:"test_source,omitempty"`
}

func (x *TestGptEntity) Reset() {
	*x = TestGptEntity{}
	mi := &file_roostGPT_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestGptEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGptEntity) ProtoMessage() {}

func (x *TestGptEntity) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestGptEntity.ProtoReflect.Descriptor instead.
func (*TestGptEntity) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{4}
}

func (x *TestGptEntity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestGptEntity) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TestGptEntity) GetThirdpartyAppId() string {
	if x != nil {
		return x.ThirdpartyAppId
	}
	return ""
}

func (x *TestGptEntity) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *TestGptEntity) GetGitInfo() string {
	if x != nil {
		return x.GitInfo
	}
	return ""
}

func (x *TestGptEntity) GetAiModelInfo() string {
	if x != nil {
		return x.AiModelInfo
	}
	return ""
}

func (x *TestGptEntity) GetIntegrationInfo() string {
	if x != nil {
		return x.IntegrationInfo
	}
	return ""
}

func (x *TestGptEntity) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

func (x *TestGptEntity) GetTriggerEvents() string {
	if x != nil {
		return x.TriggerEvents
	}
	return ""
}

func (x *TestGptEntity) GetCreatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedOn
	}
	return nil
}

func (x *TestGptEntity) GetUpdatedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedOn
	}
	return nil
}

func (x *TestGptEntity) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *TestGptEntity) GetTestTimeout() int32 {
	if x != nil {
		return x.TestTimeout
	}
	return 0
}

func (x *TestGptEntity) GetWebhookError() string {
	if x != nil {
		return x.WebhookError
	}
	return ""
}

func (x *TestGptEntity) GetTestFramework() string {
	if x != nil {
		return x.TestFramework
	}
	return ""
}

func (x *TestGptEntity) GetGitType() string {
	if x != nil {
		return x.GitType
	}
	return ""
}

func (x *TestGptEntity) GetSourceRepo() string {
	if x != nil {
		return x.SourceRepo
	}
	return ""
}

func (x *TestGptEntity) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *TestGptEntity) GetConnectorIds() string {
	if x != nil {
		return x.ConnectorIds
	}
	return ""
}

func (x *TestGptEntity) GetGitOps() int32 {
	if x != nil {
		return x.GitOps
	}
	return 0
}

func (x *TestGptEntity) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

func (x *TestGptEntity) GetTestSource() string {
	if x != nil {
		return x.TestSource
	}
	return ""
}

type AddTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           string               `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	TestName        string               `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	GitType         string               `protobuf:"bytes,3,opt,name=git_type,json=gitType,proto3" json:"git_type,omitempty"`
	AiModelInfo     *TestAiModelInfo     `protobuf:"bytes,4,opt,name=ai_model_info,json=aiModelInfo,proto3" json:"ai_model_info,omitempty"`
	GitInfo         *TestGitInfo         `protobuf:"bytes,5,opt,name=git_info,json=gitInfo,proto3" json:"git_info,omitempty"`
	IntegrationInfo *TestIntegrationInfo `protobuf:"bytes,6,opt,name=integration_info,json=integrationInfo,proto3" json:"integration_info,omitempty"`
	AdditionalInfo  *TestAdditionalInfo  `protobuf:"bytes,7,opt,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
	TestTimeout     int32                `protobuf:"varint,8,opt,name=test_timeout,json=testTimeout,proto3" json:"test_timeout,omitempty"`
	GitOps          bool                 `protobuf:"varint,9,opt,name=git_ops,json=gitOps,proto3" json:"git_ops,omitempty"`
	TriggerEvents   []string             `protobuf:"bytes,10,rep,name=trigger_events,json=triggerEvents,proto3" json:"trigger_events,omitempty"`
	SourceBranch    string               `protobuf:"bytes,11,opt,name=source_branch,json=sourceBranch,proto3" json:"source_branch,omitempty"`
	SourceRepo      string               `protobuf:"bytes,12,opt,name=source_repo,json=sourceRepo,proto3" json:"source_repo,omitempty"`
	TestFramework   string               `protobuf:"bytes,13,opt,name=test_framework,json=testFramework,proto3" json:"test_framework,omitempty"`
}

func (x *AddTestRequest) Reset() {
	*x = AddTestRequest{}
	mi := &file_roostGPT_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestRequest) ProtoMessage() {}

func (x *AddTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestRequest.ProtoReflect.Descriptor instead.
func (*AddTestRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{5}
}

func (x *AddTestRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AddTestRequest) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *AddTestRequest) GetGitType() string {
	if x != nil {
		return x.GitType
	}
	return ""
}

func (x *AddTestRequest) GetAiModelInfo() *TestAiModelInfo {
	if x != nil {
		return x.AiModelInfo
	}
	return nil
}

func (x *AddTestRequest) GetGitInfo() *TestGitInfo {
	if x != nil {
		return x.GitInfo
	}
	return nil
}

func (x *AddTestRequest) GetIntegrationInfo() *TestIntegrationInfo {
	if x != nil {
		return x.IntegrationInfo
	}
	return nil
}

func (x *AddTestRequest) GetAdditionalInfo() *TestAdditionalInfo {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

func (x *AddTestRequest) GetTestTimeout() int32 {
	if x != nil {
		return x.TestTimeout
	}
	return 0
}

func (x *AddTestRequest) GetGitOps() bool {
	if x != nil {
		return x.GitOps
	}
	return false
}

func (x *AddTestRequest) GetTriggerEvents() []string {
	if x != nil {
		return x.TriggerEvents
	}
	return nil
}

func (x *AddTestRequest) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *AddTestRequest) GetSourceRepo() string {
	if x != nil {
		return x.SourceRepo
	}
	return ""
}

func (x *AddTestRequest) GetTestFramework() string {
	if x != nil {
		return x.TestFramework
	}
	return ""
}

type TestAiModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectedModel       TestAiModelInfo_ModelType `protobuf:"varint,1,opt,name=selected_model,json=selectedModel,proto3,enum=roost.api.v1.TestAiModelInfo_ModelType" json:"selected_model,omitempty"`
	AccessToken         string                    `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	AiTemperature       float64                   `protobuf:"fixed64,3,opt,name=ai_temperature,json=aiTemperature,proto3" json:"ai_temperature,omitempty"`
	VertexModel         *TitleKeyPair             `protobuf:"bytes,4,opt,name=vertex_model,json=vertexModel,proto3" json:"vertex_model,omitempty"`
	OpenSourceModelInfo *IpModelNamePair          `protobuf:"bytes,5,opt,name=open_source_model_info,json=openSourceModelInfo,proto3" json:"open_source_model_info,omitempty"`
	ClaudeModel         *TitleKeyPair             `protobuf:"bytes,6,opt,name=claude_model,json=claudeModel,proto3" json:"claude_model,omitempty"`
	StarChatInfo        *IpModelNamePair          `protobuf:"bytes,7,opt,name=star_chat_info,json=starChatInfo,proto3" json:"star_chat_info,omitempty"`
	LlamaModelInfo      *IpModelNamePair          `protobuf:"bytes,8,opt,name=llama_model_info,json=llamaModelInfo,proto3" json:"llama_model_info,omitempty"`
	DbrxInfo            *DbrxModelInfo            `protobuf:"bytes,9,opt,name=dbrx_info,json=dbrxInfo,proto3" json:"dbrx_info,omitempty"`
	AzureModelInfo      *AzureModelInfo           `protobuf:"bytes,10,opt,name=azure_model_info,json=azureModelInfo,proto3" json:"azure_model_info,omitempty"`
	VertexEndpoint      string                    `protobuf:"bytes,11,opt,name=vertex_endpoint,json=vertexEndpoint,proto3" json:"vertex_endpoint,omitempty"`
	VertexProjectId     string                    `protobuf:"bytes,12,opt,name=vertex_project_id,json=vertexProjectId,proto3" json:"vertex_project_id,omitempty"`
	VertexType          string                    `protobuf:"bytes,13,opt,name=vertex_type,json=vertexType,proto3" json:"vertex_type,omitempty"`
	ConnectorId         string                    `protobuf:"bytes,14,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
	GptModel            string                    `protobuf:"bytes,15,opt,name=gpt_model,json=gptModel,proto3" json:"gpt_model,omitempty"`
}

func (x *TestAiModelInfo) Reset() {
	*x = TestAiModelInfo{}
	mi := &file_roostGPT_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestAiModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAiModelInfo) ProtoMessage() {}

func (x *TestAiModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAiModelInfo.ProtoReflect.Descriptor instead.
func (*TestAiModelInfo) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{6}
}

func (x *TestAiModelInfo) GetSelectedModel() TestAiModelInfo_ModelType {
	if x != nil {
		return x.SelectedModel
	}
	return TestAiModelInfo_OPENAI
}

func (x *TestAiModelInfo) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *TestAiModelInfo) GetAiTemperature() float64 {
	if x != nil {
		return x.AiTemperature
	}
	return 0
}

func (x *TestAiModelInfo) GetVertexModel() *TitleKeyPair {
	if x != nil {
		return x.VertexModel
	}
	return nil
}

func (x *TestAiModelInfo) GetOpenSourceModelInfo() *IpModelNamePair {
	if x != nil {
		return x.OpenSourceModelInfo
	}
	return nil
}

func (x *TestAiModelInfo) GetClaudeModel() *TitleKeyPair {
	if x != nil {
		return x.ClaudeModel
	}
	return nil
}

func (x *TestAiModelInfo) GetStarChatInfo() *IpModelNamePair {
	if x != nil {
		return x.StarChatInfo
	}
	return nil
}

func (x *TestAiModelInfo) GetLlamaModelInfo() *IpModelNamePair {
	if x != nil {
		return x.LlamaModelInfo
	}
	return nil
}

func (x *TestAiModelInfo) GetDbrxInfo() *DbrxModelInfo {
	if x != nil {
		return x.DbrxInfo
	}
	return nil
}

func (x *TestAiModelInfo) GetAzureModelInfo() *AzureModelInfo {
	if x != nil {
		return x.AzureModelInfo
	}
	return nil
}

func (x *TestAiModelInfo) GetVertexEndpoint() string {
	if x != nil {
		return x.VertexEndpoint
	}
	return ""
}

func (x *TestAiModelInfo) GetVertexProjectId() string {
	if x != nil {
		return x.VertexProjectId
	}
	return ""
}

func (x *TestAiModelInfo) GetVertexType() string {
	if x != nil {
		return x.VertexType
	}
	return ""
}

func (x *TestAiModelInfo) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *TestAiModelInfo) GetGptModel() string {
	if x != nil {
		return x.GptModel
	}
	return ""
}

type IpModelNamePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip        string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	ModelName string `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (x *IpModelNamePair) Reset() {
	*x = IpModelNamePair{}
	mi := &file_roostGPT_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpModelNamePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpModelNamePair) ProtoMessage() {}

func (x *IpModelNamePair) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpModelNamePair.ProtoReflect.Descriptor instead.
func (*IpModelNamePair) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{7}
}

func (x *IpModelNamePair) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IpModelNamePair) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type DbrxModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbrxModelName     string `protobuf:"bytes,1,opt,name=dbrx_model_name,json=dbrxModelName,proto3" json:"dbrx_model_name,omitempty"`
	DbrxAuthToken     string `protobuf:"bytes,2,opt,name=dbrx_auth_token,json=dbrxAuthToken,proto3" json:"dbrx_auth_token,omitempty"`
	DbrxModelEndpoint string `protobuf:"bytes,3,opt,name=dbrx_model_endpoint,json=dbrxModelEndpoint,proto3" json:"dbrx_model_endpoint,omitempty"`
}

func (x *DbrxModelInfo) Reset() {
	*x = DbrxModelInfo{}
	mi := &file_roostGPT_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbrxModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbrxModelInfo) ProtoMessage() {}

func (x *DbrxModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbrxModelInfo.ProtoReflect.Descriptor instead.
func (*DbrxModelInfo) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{8}
}

func (x *DbrxModelInfo) GetDbrxModelName() string {
	if x != nil {
		return x.DbrxModelName
	}
	return ""
}

func (x *DbrxModelInfo) GetDbrxAuthToken() string {
	if x != nil {
		return x.DbrxAuthToken
	}
	return ""
}

func (x *DbrxModelInfo) GetDbrxModelEndpoint() string {
	if x != nil {
		return x.DbrxModelEndpoint
	}
	return ""
}

type AzureModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AzureDeploymentName string `protobuf:"bytes,1,opt,name=azure_deployment_name,json=azureDeploymentName,proto3" json:"azure_deployment_name,omitempty"`
	AzureEndpoint       string `protobuf:"bytes,2,opt,name=azure_endpoint,json=azureEndpoint,proto3" json:"azure_endpoint,omitempty"`
	AzureOpenaiKey      string `protobuf:"bytes,3,opt,name=azure_openai_key,json=azureOpenaiKey,proto3" json:"azure_openai_key,omitempty"`
}

func (x *AzureModelInfo) Reset() {
	*x = AzureModelInfo{}
	mi := &file_roostGPT_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AzureModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureModelInfo) ProtoMessage() {}

func (x *AzureModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureModelInfo.ProtoReflect.Descriptor instead.
func (*AzureModelInfo) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{9}
}

func (x *AzureModelInfo) GetAzureDeploymentName() string {
	if x != nil {
		return x.AzureDeploymentName
	}
	return ""
}

func (x *AzureModelInfo) GetAzureEndpoint() string {
	if x != nil {
		return x.AzureEndpoint
	}
	return ""
}

func (x *AzureModelInfo) GetAzureOpenaiKey() string {
	if x != nil {
		return x.AzureOpenaiKey
	}
	return ""
}

type TestGitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source       *GitSourceRepo `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target       *GitTargetRepo `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Type         string         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	SourceRepoPr bool           `protobuf:"varint,4,opt,name=source_repo_pr,json=sourceRepoPr,proto3" json:"source_repo_pr,omitempty"`
	SelectedPath string         `protobuf:"bytes,5,opt,name=selected_path,json=selectedPath,proto3" json:"selected_path,omitempty"`
	HostType     string         `protobuf:"bytes,6,opt,name=host_type,json=hostType,proto3" json:"host_type,omitempty"`
	MaxDepth     int32          `protobuf:"varint,7,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	UserIp       string         `protobuf:"bytes,8,opt,name=user_ip,json=userIp,proto3" json:"user_ip,omitempty"`
}

func (x *TestGitInfo) Reset() {
	*x = TestGitInfo{}
	mi := &file_roostGPT_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestGitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGitInfo) ProtoMessage() {}

func (x *TestGitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestGitInfo.ProtoReflect.Descriptor instead.
func (*TestGitInfo) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{10}
}

func (x *TestGitInfo) GetSource() *GitSourceRepo {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *TestGitInfo) GetTarget() *GitTargetRepo {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *TestGitInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TestGitInfo) GetSourceRepoPr() bool {
	if x != nil {
		return x.SourceRepoPr
	}
	return false
}

func (x *TestGitInfo) GetSelectedPath() string {
	if x != nil {
		return x.SelectedPath
	}
	return ""
}

func (x *TestGitInfo) GetHostType() string {
	if x != nil {
		return x.HostType
	}
	return ""
}

func (x *TestGitInfo) GetMaxDepth() int32 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

func (x *TestGitInfo) GetUserIp() string {
	if x != nil {
		return x.UserIp
	}
	return ""
}

type GitSourceRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken           string           `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	SelectedBranch        string           `protobuf:"bytes,2,opt,name=selected_branch,json=selectedBranch,proto3" json:"selected_branch,omitempty"`
	RepositoryType        string           `protobuf:"bytes,3,opt,name=repository_type,json=repositoryType,proto3" json:"repository_type,omitempty"`
	SelectedRepo          *GitSelectedRepo `protobuf:"bytes,4,opt,name=selected_repo,json=selectedRepo,proto3" json:"selected_repo,omitempty"`
	ConnectorId           string           `protobuf:"bytes,5,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
	OrgName               string           `protobuf:"bytes,6,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	Username              string           `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	ApplicationEntrypoint string           `protobuf:"bytes,8,opt,name=application_entrypoint,json=applicationEntrypoint,proto3" json:"application_entrypoint,omitempty"`
	PublicRepoUrl         string           `protobuf:"bytes,9,opt,name=public_repo_url,json=publicRepoUrl,proto3" json:"public_repo_url,omitempty"`
}

func (x *GitSourceRepo) Reset() {
	*x = GitSourceRepo{}
	mi := &file_roostGPT_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitSourceRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitSourceRepo) ProtoMessage() {}

func (x *GitSourceRepo) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitSourceRepo.ProtoReflect.Descriptor instead.
func (*GitSourceRepo) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{11}
}

func (x *GitSourceRepo) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *GitSourceRepo) GetSelectedBranch() string {
	if x != nil {
		return x.SelectedBranch
	}
	return ""
}

func (x *GitSourceRepo) GetRepositoryType() string {
	if x != nil {
		return x.RepositoryType
	}
	return ""
}

func (x *GitSourceRepo) GetSelectedRepo() *GitSelectedRepo {
	if x != nil {
		return x.SelectedRepo
	}
	return nil
}

func (x *GitSourceRepo) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *GitSourceRepo) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *GitSourceRepo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GitSourceRepo) GetApplicationEntrypoint() string {
	if x != nil {
		return x.ApplicationEntrypoint
	}
	return ""
}

func (x *GitSourceRepo) GetPublicRepoUrl() string {
	if x != nil {
		return x.PublicRepoUrl
	}
	return ""
}

type GitTargetRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken    string           `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	SelectedBranch string           `protobuf:"bytes,2,opt,name=selected_branch,json=selectedBranch,proto3" json:"selected_branch,omitempty"`
	SelectedRepo   *GitSelectedRepo `protobuf:"bytes,3,opt,name=selected_repo,json=selectedRepo,proto3" json:"selected_repo,omitempty"`
	ConnectorId    string           `protobuf:"bytes,4,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
	OrgName        string           `protobuf:"bytes,5,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	Username       string           `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GitTargetRepo) Reset() {
	*x = GitTargetRepo{}
	mi := &file_roostGPT_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitTargetRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitTargetRepo) ProtoMessage() {}

func (x *GitTargetRepo) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitTargetRepo.ProtoReflect.Descriptor instead.
func (*GitTargetRepo) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{12}
}

func (x *GitTargetRepo) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *GitTargetRepo) GetSelectedBranch() string {
	if x != nil {
		return x.SelectedBranch
	}
	return ""
}

func (x *GitTargetRepo) GetSelectedRepo() *GitSelectedRepo {
	if x != nil {
		return x.SelectedRepo
	}
	return nil
}

func (x *GitTargetRepo) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *GitTargetRepo) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *GitTargetRepo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GitSelectedRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Id            string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Owner         string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	DefaultBranch string `protobuf:"bytes,5,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
	ProjectId     string `protobuf:"bytes,6,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectName   string `protobuf:"bytes,7,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
}

func (x *GitSelectedRepo) Reset() {
	*x = GitSelectedRepo{}
	mi := &file_roostGPT_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitSelectedRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitSelectedRepo) ProtoMessage() {}

func (x *GitSelectedRepo) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitSelectedRepo.ProtoReflect.Descriptor instead.
func (*GitSelectedRepo) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{13}
}

func (x *GitSelectedRepo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GitSelectedRepo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GitSelectedRepo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GitSelectedRepo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GitSelectedRepo) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

func (x *GitSelectedRepo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GitSelectedRepo) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type TestIntegrationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            TestIntegrationInfo_IntegrationType `protobuf:"varint,1,opt,name=type,proto3,enum=roost.api.v1.TestIntegrationInfo_IntegrationType" json:"type,omitempty"`
	JiraEmail       string                              `protobuf:"bytes,2,opt,name=jira_email,json=jiraEmail,proto3" json:"jira_email,omitempty"`
	JiraHostName    string                              `protobuf:"bytes,3,opt,name=jira_host_name,json=jiraHostName,proto3" json:"jira_host_name,omitempty"`
	JiraId          string                              `protobuf:"bytes,4,opt,name=jira_id,json=jiraId,proto3" json:"jira_id,omitempty"`
	JiraPassword    string                              `protobuf:"bytes,5,opt,name=jira_password,json=jiraPassword,proto3" json:"jira_password,omitempty"`
	AzureOrg        string                              `protobuf:"bytes,6,opt,name=azure_org,json=azureOrg,proto3" json:"azure_org,omitempty"`
	AzureProject    string                              `protobuf:"bytes,7,opt,name=azure_project,json=azureProject,proto3" json:"azure_project,omitempty"`
	AzureProjectId  string                              `protobuf:"bytes,8,opt,name=azure_project_id,json=azureProjectId,proto3" json:"azure_project_id,omitempty"`
	AzureToken      string                              `protobuf:"bytes,9,opt,name=azure_token,json=azureToken,proto3" json:"azure_token,omitempty"`
	AzureWorkItemId string                              `protobuf:"bytes,10,opt,name=azure_work_item_id,json=azureWorkItemId,proto3" json:"azure_work_item_id,omitempty"`
	ConnectorId     string                              `protobuf:"bytes,11,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
}

func (x *TestIntegrationInfo) Reset() {
	*x = TestIntegrationInfo{}
	mi := &file_roostGPT_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestIntegrationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestIntegrationInfo) ProtoMessage() {}

func (x *TestIntegrationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestIntegrationInfo.ProtoReflect.Descriptor instead.
func (*TestIntegrationInfo) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{14}
}

func (x *TestIntegrationInfo) GetType() TestIntegrationInfo_IntegrationType {
	if x != nil {
		return x.Type
	}
	return TestIntegrationInfo_NONE
}

func (x *TestIntegrationInfo) GetJiraEmail() string {
	if x != nil {
		return x.JiraEmail
	}
	return ""
}

func (x *TestIntegrationInfo) GetJiraHostName() string {
	if x != nil {
		return x.JiraHostName
	}
	return ""
}

func (x *TestIntegrationInfo) GetJiraId() string {
	if x != nil {
		return x.JiraId
	}
	return ""
}

func (x *TestIntegrationInfo) GetJiraPassword() string {
	if x != nil {
		return x.JiraPassword
	}
	return ""
}

func (x *TestIntegrationInfo) GetAzureOrg() string {
	if x != nil {
		return x.AzureOrg
	}
	return ""
}

func (x *TestIntegrationInfo) GetAzureProject() string {
	if x != nil {
		return x.AzureProject
	}
	return ""
}

func (x *TestIntegrationInfo) GetAzureProjectId() string {
	if x != nil {
		return x.AzureProjectId
	}
	return ""
}

func (x *TestIntegrationInfo) GetAzureToken() string {
	if x != nil {
		return x.AzureToken
	}
	return ""
}

func (x *TestIntegrationInfo) GetAzureWorkItemId() string {
	if x != nil {
		return x.AzureWorkItemId
	}
	return ""
}

func (x *TestIntegrationInfo) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

type TestAdditionalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language           string              `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Iterations         string              `protobuf:"bytes,2,opt,name=iterations,proto3" json:"iterations,omitempty"`
	TestType           string              `protobuf:"bytes,3,opt,name=test_type,json=testType,proto3" json:"test_type,omitempty"`
	LogType            string              `protobuf:"bytes,4,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	LogFile            *FileContent        `protobuf:"bytes,5,opt,name=log_file,json=logFile,proto3" json:"log_file,omitempty"`
	DependencyVersions *DependencyVersions `protobuf:"bytes,6,opt,name=dependency_versions,json=dependencyVersions,proto3" json:"dependency_versions,omitempty"`
	ApiSpec            *ApiSpec            `protobuf:"bytes,7,opt,name=api_spec,json=apiSpec,proto3" json:"api_spec,omitempty"`
	BehaviouralTest    *ApiSpec            `protobuf:"bytes,8,opt,name=behavioural_test,json=behaviouralTest,proto3" json:"behavioural_test,omitempty"`
	EnvConfig          []*AppEnvConfig     `protobuf:"bytes,9,rep,name=env_config,json=envConfig,proto3" json:"env_config,omitempty"`
	FunctionsToTest    string              `protobuf:"bytes,10,opt,name=functions_to_test,json=functionsToTest,proto3" json:"functions_to_test,omitempty"`
	HttpFilters        []string            `protobuf:"bytes,11,rep,name=http_filters,json=httpFilters,proto3" json:"http_filters,omitempty"`
	EmailConfig        *EmailConfig        `protobuf:"bytes,12,opt,name=email_config,json=emailConfig,proto3" json:"email_config,omitempty"`
	SlackConfig        *SlackConfig        `protobuf:"bytes,13,opt,name=slack_config,json=slackConfig,proto3" json:"slack_config,omitempty"`
	MsTeamsConfig      *MsTeamsConfig      `protobuf:"bytes,14,opt,name=ms_teams_config,json=msTeamsConfig,proto3" json:"ms_teams_config,omitempty"`
	CloudwatchConfig   *CloudWatchConfig   `protobuf:"bytes,15,opt,name=cloudwatch_config,json=cloudwatchConfig,proto3" json:"cloudwatch_config,omitempty"`
	CreateApiSpec      bool                `protobuf:"varint,16,opt,name=create_api_spec,json=createApiSpec,proto3" json:"create_api_spec,omitempty"`
	CustomPrompt       string              `protobuf:"bytes,17,opt,name=custom_prompt,json=customPrompt,proto3" json:"custom_prompt,omitempty"`
	CustomTags         []string            `protobuf:"bytes,18,rep,name=custom_tags,json=customTags,proto3" json:"custom_tags,omitempty"`
}

func (x *TestAdditionalInfo) Reset() {
	*x = TestAdditionalInfo{}
	mi := &file_roostGPT_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestAdditionalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAdditionalInfo) ProtoMessage() {}

func (x *TestAdditionalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAdditionalInfo.ProtoReflect.Descriptor instead.
func (*TestAdditionalInfo) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{15}
}

func (x *TestAdditionalInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *TestAdditionalInfo) GetIterations() string {
	if x != nil {
		return x.Iterations
	}
	return ""
}

func (x *TestAdditionalInfo) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *TestAdditionalInfo) GetLogType() string {
	if x != nil {
		return x.LogType
	}
	return ""
}

func (x *TestAdditionalInfo) GetLogFile() *FileContent {
	if x != nil {
		return x.LogFile
	}
	return nil
}

func (x *TestAdditionalInfo) GetDependencyVersions() *DependencyVersions {
	if x != nil {
		return x.DependencyVersions
	}
	return nil
}

func (x *TestAdditionalInfo) GetApiSpec() *ApiSpec {
	if x != nil {
		return x.ApiSpec
	}
	return nil
}

func (x *TestAdditionalInfo) GetBehaviouralTest() *ApiSpec {
	if x != nil {
		return x.BehaviouralTest
	}
	return nil
}

func (x *TestAdditionalInfo) GetEnvConfig() []*AppEnvConfig {
	if x != nil {
		return x.EnvConfig
	}
	return nil
}

func (x *TestAdditionalInfo) GetFunctionsToTest() string {
	if x != nil {
		return x.FunctionsToTest
	}
	return ""
}

func (x *TestAdditionalInfo) GetHttpFilters() []string {
	if x != nil {
		return x.HttpFilters
	}
	return nil
}

func (x *TestAdditionalInfo) GetEmailConfig() *EmailConfig {
	if x != nil {
		return x.EmailConfig
	}
	return nil
}

func (x *TestAdditionalInfo) GetSlackConfig() *SlackConfig {
	if x != nil {
		return x.SlackConfig
	}
	return nil
}

func (x *TestAdditionalInfo) GetMsTeamsConfig() *MsTeamsConfig {
	if x != nil {
		return x.MsTeamsConfig
	}
	return nil
}

func (x *TestAdditionalInfo) GetCloudwatchConfig() *CloudWatchConfig {
	if x != nil {
		return x.CloudwatchConfig
	}
	return nil
}

func (x *TestAdditionalInfo) GetCreateApiSpec() bool {
	if x != nil {
		return x.CreateApiSpec
	}
	return false
}

func (x *TestAdditionalInfo) GetCustomPrompt() string {
	if x != nil {
		return x.CustomPrompt
	}
	return ""
}

func (x *TestAdditionalInfo) GetCustomTags() []string {
	if x != nil {
		return x.CustomTags
	}
	return nil
}

type DependencyVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JavaVersion   *TitleKeyPair `protobuf:"bytes,1,opt,name=java_version,json=javaVersion,proto3" json:"java_version,omitempty"`
	PythonVersion *TitleKeyPair `protobuf:"bytes,2,opt,name=python_version,json=pythonVersion,proto3" json:"python_version,omitempty"`
	NodeVersion   *TitleKeyPair `protobuf:"bytes,3,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	GoVersion     *TitleKeyPair `protobuf:"bytes,4,opt,name=go_version,json=goVersion,proto3" json:"go_version,omitempty"`
	CppVersion    *TitleKeyPair `protobuf:"bytes,5,opt,name=cpp_version,json=cppVersion,proto3" json:"cpp_version,omitempty"`
	DotnetVersion *TitleKeyPair `protobuf:"bytes,6,opt,name=dotnet_version,json=dotnetVersion,proto3" json:"dotnet_version,omitempty"`
	GradleVersion *TitleKeyPair `protobuf:"bytes,7,opt,name=gradle_version,json=gradleVersion,proto3" json:"gradle_version,omitempty"`
	MavenVersion  *TitleKeyPair `protobuf:"bytes,8,opt,name=maven_version,json=mavenVersion,proto3" json:"maven_version,omitempty"`
}

func (x *DependencyVersions) Reset() {
	*x = DependencyVersions{}
	mi := &file_roostGPT_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DependencyVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyVersions) ProtoMessage() {}

func (x *DependencyVersions) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyVersions.ProtoReflect.Descriptor instead.
func (*DependencyVersions) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{16}
}

func (x *DependencyVersions) GetJavaVersion() *TitleKeyPair {
	if x != nil {
		return x.JavaVersion
	}
	return nil
}

func (x *DependencyVersions) GetPythonVersion() *TitleKeyPair {
	if x != nil {
		return x.PythonVersion
	}
	return nil
}

func (x *DependencyVersions) GetNodeVersion() *TitleKeyPair {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *DependencyVersions) GetGoVersion() *TitleKeyPair {
	if x != nil {
		return x.GoVersion
	}
	return nil
}

func (x *DependencyVersions) GetCppVersion() *TitleKeyPair {
	if x != nil {
		return x.CppVersion
	}
	return nil
}

func (x *DependencyVersions) GetDotnetVersion() *TitleKeyPair {
	if x != nil {
		return x.DotnetVersion
	}
	return nil
}

func (x *DependencyVersions) GetGradleVersion() *TitleKeyPair {
	if x != nil {
		return x.GradleVersion
	}
	return nil
}

func (x *DependencyVersions) GetMavenVersion() *TitleKeyPair {
	if x != nil {
		return x.MavenVersion
	}
	return nil
}

type ApiSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	SourceType  string         `protobuf:"bytes,2,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	Url         []string       `protobuf:"bytes,3,rep,name=url,proto3" json:"url,omitempty"`
	Gitpath     []string       `protobuf:"bytes,4,rep,name=gitpath,proto3" json:"gitpath,omitempty"`
	FileContent []*FileContent `protobuf:"bytes,5,rep,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (x *ApiSpec) Reset() {
	*x = ApiSpec{}
	mi := &file_roostGPT_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiSpec) ProtoMessage() {}

func (x *ApiSpec) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiSpec.ProtoReflect.Descriptor instead.
func (*ApiSpec) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{17}
}

func (x *ApiSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApiSpec) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *ApiSpec) GetUrl() []string {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ApiSpec) GetGitpath() []string {
	if x != nil {
		return x.Gitpath
	}
	return nil
}

func (x *ApiSpec) GetFileContent() []*FileContent {
	if x != nil {
		return x.FileContent
	}
	return nil
}

type AppEnvConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       string      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type        string      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Secret      bool        `protobuf:"varint,4,opt,name=secret,proto3" json:"secret,omitempty"`
	File        bool        `protobuf:"varint,5,opt,name=file,proto3" json:"file,omitempty"`
	FileDetails *FileConfig `protobuf:"bytes,6,opt,name=file_details,json=fileDetails,proto3" json:"file_details,omitempty"`
}

func (x *AppEnvConfig) Reset() {
	*x = AppEnvConfig{}
	mi := &file_roostGPT_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppEnvConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppEnvConfig) ProtoMessage() {}

func (x *AppEnvConfig) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppEnvConfig.ProtoReflect.Descriptor instead.
func (*AppEnvConfig) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{18}
}

func (x *AppEnvConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AppEnvConfig) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AppEnvConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AppEnvConfig) GetSecret() bool {
	if x != nil {
		return x.Secret
	}
	return false
}

func (x *AppEnvConfig) GetFile() bool {
	if x != nil {
		return x.File
	}
	return false
}

func (x *AppEnvConfig) GetFileDetails() *FileConfig {
	if x != nil {
		return x.FileDetails
	}
	return nil
}

type EmailConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteAll           bool     `protobuf:"varint,1,opt,name=invite_all,json=inviteAll,proto3" json:"invite_all,omitempty"`
	InviteRoosterEmails []string `protobuf:"bytes,2,rep,name=invite_rooster_emails,json=inviteRoosterEmails,proto3" json:"invite_rooster_emails,omitempty"`
}

func (x *EmailConfig) Reset() {
	*x = EmailConfig{}
	mi := &file_roostGPT_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailConfig) ProtoMessage() {}

func (x *EmailConfig) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailConfig.ProtoReflect.Descriptor instead.
func (*EmailConfig) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{19}
}

func (x *EmailConfig) GetInviteAll() bool {
	if x != nil {
		return x.InviteAll
	}
	return false
}

func (x *EmailConfig) GetInviteRoosterEmails() []string {
	if x != nil {
		return x.InviteRoosterEmails
	}
	return nil
}

type SlackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlackChannel   *TitleKeyPair `protobuf:"bytes,1,opt,name=slack_channel,json=slackChannel,proto3" json:"slack_channel,omitempty"`
	SlackChannelId string        `protobuf:"bytes,2,opt,name=slack_channel_id,json=slackChannelId,proto3" json:"slack_channel_id,omitempty"`
	SlackToken     string        `protobuf:"bytes,3,opt,name=slack_token,json=slackToken,proto3" json:"slack_token,omitempty"`
}

func (x *SlackConfig) Reset() {
	*x = SlackConfig{}
	mi := &file_roostGPT_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackConfig) ProtoMessage() {}

func (x *SlackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackConfig.ProtoReflect.Descriptor instead.
func (*SlackConfig) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{20}
}

func (x *SlackConfig) GetSlackChannel() *TitleKeyPair {
	if x != nil {
		return x.SlackChannel
	}
	return nil
}

func (x *SlackConfig) GetSlackChannelId() string {
	if x != nil {
		return x.SlackChannelId
	}
	return ""
}

func (x *SlackConfig) GetSlackToken() string {
	if x != nil {
		return x.SlackToken
	}
	return ""
}

type MsTeamsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsTeamsName     *TitleKeyPair `protobuf:"bytes,1,opt,name=ms_teams_name,json=msTeamsName,proto3" json:"ms_teams_name,omitempty"`
	MsTeamsChannel  *TitleKeyPair `protobuf:"bytes,2,opt,name=ms_teams_channel,json=msTeamsChannel,proto3" json:"ms_teams_channel,omitempty"`
	MsTeamsTenantId string        `protobuf:"bytes,3,opt,name=ms_teams_tenant_id,json=msTeamsTenantId,proto3" json:"ms_teams_tenant_id,omitempty"`
}

func (x *MsTeamsConfig) Reset() {
	*x = MsTeamsConfig{}
	mi := &file_roostGPT_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsTeamsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsTeamsConfig) ProtoMessage() {}

func (x *MsTeamsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsTeamsConfig.ProtoReflect.Descriptor instead.
func (*MsTeamsConfig) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{21}
}

func (x *MsTeamsConfig) GetMsTeamsName() *TitleKeyPair {
	if x != nil {
		return x.MsTeamsName
	}
	return nil
}

func (x *MsTeamsConfig) GetMsTeamsChannel() *TitleKeyPair {
	if x != nil {
		return x.MsTeamsChannel
	}
	return nil
}

func (x *MsTeamsConfig) GetMsTeamsTenantId() string {
	if x != nil {
		return x.MsTeamsTenantId
	}
	return ""
}

type CloudWatchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled        bool            `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CwCredentials  *AwsCredentials `protobuf:"bytes,2,opt,name=cw_credentials,json=cwCredentials,proto3" json:"cw_credentials,omitempty"`
	CwLogGroupName string          `protobuf:"bytes,3,opt,name=cw_log_group_name,json=cwLogGroupName,proto3" json:"cw_log_group_name,omitempty"`
	CwRegion       string          `protobuf:"bytes,4,opt,name=cw_region,json=cwRegion,proto3" json:"cw_region,omitempty"`
}

func (x *CloudWatchConfig) Reset() {
	*x = CloudWatchConfig{}
	mi := &file_roostGPT_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudWatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudWatchConfig) ProtoMessage() {}

func (x *CloudWatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudWatchConfig.ProtoReflect.Descriptor instead.
func (*CloudWatchConfig) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{22}
}

func (x *CloudWatchConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CloudWatchConfig) GetCwCredentials() *AwsCredentials {
	if x != nil {
		return x.CwCredentials
	}
	return nil
}

func (x *CloudWatchConfig) GetCwLogGroupName() string {
	if x != nil {
		return x.CwLogGroupName
	}
	return ""
}

func (x *CloudWatchConfig) GetCwRegion() string {
	if x != nil {
		return x.CwRegion
	}
	return ""
}

type AwsCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled              bool        `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CredentialsInputType string      `protobuf:"bytes,2,opt,name=credentials_input_type,json=credentialsInputType,proto3" json:"credentials_input_type,omitempty"`
	AccessKeyId          string      `protobuf:"bytes,3,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretAccessKey      string      `protobuf:"bytes,4,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	SessionToken         string      `protobuf:"bytes,5,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	CredentialsFile      *FileConfig `protobuf:"bytes,6,opt,name=credentials_file,json=credentialsFile,proto3" json:"credentials_file,omitempty"`
	UseAdminCreds        bool        `protobuf:"varint,7,opt,name=use_admin_creds,json=useAdminCreds,proto3" json:"use_admin_creds,omitempty"`
}

func (x *AwsCredentials) Reset() {
	*x = AwsCredentials{}
	mi := &file_roostGPT_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCredentials) ProtoMessage() {}

func (x *AwsCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCredentials.ProtoReflect.Descriptor instead.
func (*AwsCredentials) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{23}
}

func (x *AwsCredentials) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AwsCredentials) GetCredentialsInputType() string {
	if x != nil {
		return x.CredentialsInputType
	}
	return ""
}

func (x *AwsCredentials) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AwsCredentials) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *AwsCredentials) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *AwsCredentials) GetCredentialsFile() *FileConfig {
	if x != nil {
		return x.CredentialsFile
	}
	return nil
}

func (x *AwsCredentials) GetUseAdminCreds() bool {
	if x != nil {
		return x.UseAdminCreds
	}
	return false
}

// Request/Response messages
type GetAllTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetForAll   bool     `protobuf:"varint,1,opt,name=get_for_all,json=getForAll,proto3" json:"get_for_all,omitempty"`
	SearchTerm  string   `protobuf:"bytes,2,opt,name=search_term,json=searchTerm,proto3" json:"search_term,omitempty"`
	Take        string   `protobuf:"bytes,3,opt,name=take,proto3" json:"take,omitempty"`
	Skip        string   `protobuf:"bytes,4,opt,name=skip,proto3" json:"skip,omitempty"`
	LabelFilter []string `protobuf:"bytes,5,rep,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
}

func (x *GetAllTestsRequest) Reset() {
	*x = GetAllTestsRequest{}
	mi := &file_roostGPT_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTestsRequest) ProtoMessage() {}

func (x *GetAllTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTestsRequest.ProtoReflect.Descriptor instead.
func (*GetAllTestsRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{24}
}

func (x *GetAllTestsRequest) GetGetForAll() bool {
	if x != nil {
		return x.GetForAll
	}
	return false
}

func (x *GetAllTestsRequest) GetSearchTerm() string {
	if x != nil {
		return x.SearchTerm
	}
	return ""
}

func (x *GetAllTestsRequest) GetTake() string {
	if x != nil {
		return x.Take
	}
	return ""
}

func (x *GetAllTestsRequest) GetSkip() string {
	if x != nil {
		return x.Skip
	}
	return ""
}

func (x *GetAllTestsRequest) GetLabelFilter() []string {
	if x != nil {
		return x.LabelFilter
	}
	return nil
}

type GetAllTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests []*TestGptEntity `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *GetAllTestsResponse) Reset() {
	*x = GetAllTestsResponse{}
	mi := &file_roostGPT_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTestsResponse) ProtoMessage() {}

func (x *GetAllTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTestsResponse.ProtoReflect.Descriptor instead.
func (*GetAllTestsResponse) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{25}
}

func (x *GetAllTestsResponse) GetTests() []*TestGptEntity {
	if x != nil {
		return x.Tests
	}
	return nil
}

type GetOneTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *GetOneTestRequest) Reset() {
	*x = GetOneTestRequest{}
	mi := &file_roostGPT_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOneTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneTestRequest) ProtoMessage() {}

func (x *GetOneTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneTestRequest.ProtoReflect.Descriptor instead.
func (*GetOneTestRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{26}
}

func (x *GetOneTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type EditTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId string         `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Test   *TestGptEntity `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *EditTestRequest) Reset() {
	*x = EditTestRequest{}
	mi := &file_roostGPT_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditTestRequest) ProtoMessage() {}

func (x *EditTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditTestRequest.ProtoReflect.Descriptor instead.
func (*EditTestRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{27}
}

func (x *EditTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *EditTestRequest) GetTest() *TestGptEntity {
	if x != nil {
		return x.Test
	}
	return nil
}

type DeleteTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *DeleteTestRequest) Reset() {
	*x = DeleteTestRequest{}
	mi := &file_roostGPT_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestRequest) ProtoMessage() {}

func (x *DeleteTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type TriggerTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *TriggerTestRequest) Reset() {
	*x = TriggerTestRequest{}
	mi := &file_roostGPT_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTestRequest) ProtoMessage() {}

func (x *TriggerTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTestRequest.ProtoReflect.Descriptor instead.
func (*TriggerTestRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{29}
}

func (x *TriggerTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type GetAllEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchTerm   string   `protobuf:"bytes,1,opt,name=search_term,json=searchTerm,proto3" json:"search_term,omitempty"`
	Take         string   `protobuf:"bytes,2,opt,name=take,proto3" json:"take,omitempty"`
	Skip         string   `protobuf:"bytes,3,opt,name=skip,proto3" json:"skip,omitempty"`
	TestId       string   `protobuf:"bytes,4,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	StatusFilter []string `protobuf:"bytes,5,rep,name=status_filter,json=statusFilter,proto3" json:"status_filter,omitempty"`
	OrderBy      string   `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	TimeFilter   string   `protobuf:"bytes,7,opt,name=time_filter,json=timeFilter,proto3" json:"time_filter,omitempty"`
	LabelFilter  []string `protobuf:"bytes,8,rep,name=label_filter,json=labelFilter,proto3" json:"label_filter,omitempty"`
}

func (x *GetAllEventsRequest) Reset() {
	*x = GetAllEventsRequest{}
	mi := &file_roostGPT_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllEventsRequest) ProtoMessage() {}

func (x *GetAllEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllEventsRequest.ProtoReflect.Descriptor instead.
func (*GetAllEventsRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{30}
}

func (x *GetAllEventsRequest) GetSearchTerm() string {
	if x != nil {
		return x.SearchTerm
	}
	return ""
}

func (x *GetAllEventsRequest) GetTake() string {
	if x != nil {
		return x.Take
	}
	return ""
}

func (x *GetAllEventsRequest) GetSkip() string {
	if x != nil {
		return x.Skip
	}
	return ""
}

func (x *GetAllEventsRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *GetAllEventsRequest) GetStatusFilter() []string {
	if x != nil {
		return x.StatusFilter
	}
	return nil
}

func (x *GetAllEventsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetAllEventsRequest) GetTimeFilter() string {
	if x != nil {
		return x.TimeFilter
	}
	return ""
}

func (x *GetAllEventsRequest) GetLabelFilter() []string {
	if x != nil {
		return x.LabelFilter
	}
	return nil
}

type GetAllEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *GetAllEventsResponse) Reset() {
	*x = GetAllEventsResponse{}
	mi := &file_roostGPT_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllEventsResponse) ProtoMessage() {}

func (x *GetAllEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllEventsResponse.ProtoReflect.Descriptor instead.
func (*GetAllEventsResponse) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{31}
}

func (x *GetAllEventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status           string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusDetails    string                 `protobuf:"bytes,3,opt,name=status_details,json=statusDetails,proto3" json:"status_details,omitempty"`
	CompletionTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
	ModificationTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=modification_time,json=modificationTime,proto3" json:"modification_time,omitempty"`
	TestEndpoints    string                 `protobuf:"bytes,6,opt,name=test_endpoints,json=testEndpoints,proto3" json:"test_endpoints,omitempty"`
	TestReport       string                 `protobuf:"bytes,7,opt,name=test_report,json=testReport,proto3" json:"test_report,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_roostGPT_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{32}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Event) GetStatusDetails() string {
	if x != nil {
		return x.StatusDetails
	}
	return ""
}

func (x *Event) GetCompletionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletionTime
	}
	return nil
}

func (x *Event) GetModificationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModificationTime
	}
	return nil
}

func (x *Event) GetTestEndpoints() string {
	if x != nil {
		return x.TestEndpoints
	}
	return ""
}

func (x *Event) GetTestReport() string {
	if x != nil {
		return x.TestReport
	}
	return ""
}

type GetOneEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerId string `protobuf:"bytes,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
}

func (x *GetOneEventRequest) Reset() {
	*x = GetOneEventRequest{}
	mi := &file_roostGPT_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOneEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneEventRequest) ProtoMessage() {}

func (x *GetOneEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneEventRequest.ProtoReflect.Descriptor instead.
func (*GetOneEventRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{33}
}

func (x *GetOneEventRequest) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

type EditTriggerEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerId string `protobuf:"bytes,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	Event     *Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *EditTriggerEventRequest) Reset() {
	*x = EditTriggerEventRequest{}
	mi := &file_roostGPT_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditTriggerEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditTriggerEventRequest) ProtoMessage() {}

func (x *EditTriggerEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditTriggerEventRequest.ProtoReflect.Descriptor instead.
func (*EditTriggerEventRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{34}
}

func (x *EditTriggerEventRequest) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

func (x *EditTriggerEventRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type AbortTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerId string `protobuf:"bytes,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
}

func (x *AbortTriggerRequest) Reset() {
	*x = AbortTriggerRequest{}
	mi := &file_roostGPT_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbortTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortTriggerRequest) ProtoMessage() {}

func (x *AbortTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortTriggerRequest.ProtoReflect.Descriptor instead.
func (*AbortTriggerRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{35}
}

func (x *AbortTriggerRequest) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

type ExecuteTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerId     string          `protobuf:"bytes,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	TargetUrl     string          `protobuf:"bytes,2,opt,name=target_url,json=targetUrl,proto3" json:"target_url,omitempty"`
	FilePath      []string        `protobuf:"bytes,3,rep,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	CsvFilePath   string          `protobuf:"bytes,4,opt,name=csv_file_path,json=csvFilePath,proto3" json:"csv_file_path,omitempty"`
	Endpoint      string          `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ArrivalRate   int32           `protobuf:"varint,6,opt,name=arrival_rate,json=arrivalRate,proto3" json:"arrival_rate,omitempty"`
	Duration      int32           `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	StatusCode    int32           `protobuf:"varint,8,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	TestFramework string          `protobuf:"bytes,9,opt,name=test_framework,json=testFramework,proto3" json:"test_framework,omitempty"`
	EnvConfig     []*AppEnvConfig `protobuf:"bytes,10,rep,name=env_config,json=envConfig,proto3" json:"env_config,omitempty"`
}

func (x *ExecuteTestRequest) Reset() {
	*x = ExecuteTestRequest{}
	mi := &file_roostGPT_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTestRequest) ProtoMessage() {}

func (x *ExecuteTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTestRequest.ProtoReflect.Descriptor instead.
func (*ExecuteTestRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{36}
}

func (x *ExecuteTestRequest) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

func (x *ExecuteTestRequest) GetTargetUrl() string {
	if x != nil {
		return x.TargetUrl
	}
	return ""
}

func (x *ExecuteTestRequest) GetFilePath() []string {
	if x != nil {
		return x.FilePath
	}
	return nil
}

func (x *ExecuteTestRequest) GetCsvFilePath() string {
	if x != nil {
		return x.CsvFilePath
	}
	return ""
}

func (x *ExecuteTestRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *ExecuteTestRequest) GetArrivalRate() int32 {
	if x != nil {
		return x.ArrivalRate
	}
	return 0
}

func (x *ExecuteTestRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ExecuteTestRequest) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ExecuteTestRequest) GetTestFramework() string {
	if x != nil {
		return x.TestFramework
	}
	return ""
}

func (x *ExecuteTestRequest) GetEnvConfig() []*AppEnvConfig {
	if x != nil {
		return x.EnvConfig
	}
	return nil
}

type AbortTestExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerId string `protobuf:"bytes,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
}

func (x *AbortTestExecuteRequest) Reset() {
	*x = AbortTestExecuteRequest{}
	mi := &file_roostGPT_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbortTestExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortTestExecuteRequest) ProtoMessage() {}

func (x *AbortTestExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortTestExecuteRequest.ProtoReflect.Descriptor instead.
func (*AbortTestExecuteRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{37}
}

func (x *AbortTestExecuteRequest) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

type GetTestExecutionReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerId  string `protobuf:"bytes,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	FileChoice string `protobuf:"bytes,2,opt,name=file_choice,json=fileChoice,proto3" json:"file_choice,omitempty"`
	FilePath   string `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
}

func (x *GetTestExecutionReportRequest) Reset() {
	*x = GetTestExecutionReportRequest{}
	mi := &file_roostGPT_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTestExecutionReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestExecutionReportRequest) ProtoMessage() {}

func (x *GetTestExecutionReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestExecutionReportRequest.ProtoReflect.Descriptor instead.
func (*GetTestExecutionReportRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{38}
}

func (x *GetTestExecutionReportRequest) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

func (x *GetTestExecutionReportRequest) GetFileChoice() string {
	if x != nil {
		return x.FileChoice
	}
	return ""
}

func (x *GetTestExecutionReportRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type TestExecutionReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportContent string `protobuf:"bytes,1,opt,name=report_content,json=reportContent,proto3" json:"report_content,omitempty"`
}

func (x *TestExecutionReport) Reset() {
	*x = TestExecutionReport{}
	mi := &file_roostGPT_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestExecutionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestExecutionReport) ProtoMessage() {}

func (x *TestExecutionReport) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestExecutionReport.ProtoReflect.Descriptor instead.
func (*TestExecutionReport) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{39}
}

func (x *TestExecutionReport) GetReportContent() string {
	if x != nil {
		return x.ReportContent
	}
	return ""
}

type GetTestExecutionFileStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerId string `protobuf:"bytes,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	FilePath  string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
}

func (x *GetTestExecutionFileStatusRequest) Reset() {
	*x = GetTestExecutionFileStatusRequest{}
	mi := &file_roostGPT_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTestExecutionFileStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestExecutionFileStatusRequest) ProtoMessage() {}

func (x *GetTestExecutionFileStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestExecutionFileStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTestExecutionFileStatusRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{40}
}

func (x *GetTestExecutionFileStatusRequest) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

func (x *GetTestExecutionFileStatusRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type TestExecutionFileStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TestExecutionFileStatus) Reset() {
	*x = TestExecutionFileStatus{}
	mi := &file_roostGPT_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestExecutionFileStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestExecutionFileStatus) ProtoMessage() {}

func (x *TestExecutionFileStatus) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestExecutionFileStatus.ProtoReflect.Descriptor instead.
func (*TestExecutionFileStatus) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{41}
}

func (x *TestExecutionFileStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerId string `protobuf:"bytes,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
}

func (x *GetLogsRequest) Reset() {
	*x = GetLogsRequest{}
	mi := &file_roostGPT_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsRequest) ProtoMessage() {}

func (x *GetLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsRequest.ProtoReflect.Descriptor instead.
func (*GetLogsRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{42}
}

func (x *GetLogsRequest) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

type GetLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs string `protobuf:"bytes,1,opt,name=logs,proto3" json:"logs,omitempty"`
}

func (x *GetLogsResponse) Reset() {
	*x = GetLogsResponse{}
	mi := &file_roostGPT_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsResponse) ProtoMessage() {}

func (x *GetLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsResponse.ProtoReflect.Descriptor instead.
func (*GetLogsResponse) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{43}
}

func (x *GetLogsResponse) GetLogs() string {
	if x != nil {
		return x.Logs
	}
	return ""
}

type RetriggerTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerId          string   `protobuf:"bytes,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	ImproveTest        bool     `protobuf:"varint,2,opt,name=improve_test,json=improveTest,proto3" json:"improve_test,omitempty"`
	FilePath           []string `protobuf:"bytes,3,rep,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	UserContent        string   `protobuf:"bytes,4,opt,name=user_content,json=userContent,proto3" json:"user_content,omitempty"`
	TestscriptEndpoint string   `protobuf:"bytes,5,opt,name=testscript_endpoint,json=testscriptEndpoint,proto3" json:"testscript_endpoint,omitempty"`
	GitPrUrl           string   `protobuf:"bytes,6,opt,name=git_pr_url,json=gitPrUrl,proto3" json:"git_pr_url,omitempty"`
}

func (x *RetriggerTestRequest) Reset() {
	*x = RetriggerTestRequest{}
	mi := &file_roostGPT_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetriggerTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetriggerTestRequest) ProtoMessage() {}

func (x *RetriggerTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_roostGPT_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetriggerTestRequest.ProtoReflect.Descriptor instead.
func (*RetriggerTestRequest) Descriptor() ([]byte, []int) {
	return file_roostGPT_proto_rawDescGZIP(), []int{44}
}

func (x *RetriggerTestRequest) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

func (x *RetriggerTestRequest) GetImproveTest() bool {
	if x != nil {
		return x.ImproveTest
	}
	return false
}

func (x *RetriggerTestRequest) GetFilePath() []string {
	if x != nil {
		return x.FilePath
	}
	return nil
}

func (x *RetriggerTestRequest) GetUserContent() string {
	if x != nil {
		return x.UserContent
	}
	return ""
}

func (x *RetriggerTestRequest) GetTestscriptEndpoint() string {
	if x != nil {
		return x.TestscriptEndpoint
	}
	return ""
}

func (x *RetriggerTestRequest) GetGitPrUrl() string {
	if x != nil {
		return x.GitPrUrl
	}
	return ""
}

var File_roostGPT_proto protoreflect.FileDescriptor

var file_roostGPT_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x47, 0x50, 0x54, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0c, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0x0a, 0x0c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x6a, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x0a,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x06, 0x0a, 0x0d, 0x54,
	0x65, 0x73, 0x74, 0x47, 0x70, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x69, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x67, 0x69, 0x74, 0x4f, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0xc1, 0x04, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x69, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x47, 0x69, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x67, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x10, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x6f, 0x70,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x69, 0x74, 0x4f, 0x70, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x22, 0xd7, 0x07, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x41, 0x69, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x69,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x61, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x52, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x13, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x75, 0x64, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x6f,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x75, 0x64, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x6f,
	0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x10, 0x6c, 0x6c, 0x61, 0x6d,
	0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x0e, 0x6c, 0x6c, 0x61, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x62, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x62, 0x72, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x64, 0x62, 0x72, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x10, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x70, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x70, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x45, 0x4e, 0x41,
	0x49, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x54, 0x45, 0x58, 0x41, 0x49, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x42, 0x52, 0x58, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x5a, 0x55, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x41, 0x49, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x41, 0x55, 0x44, 0x45, 0x5f,
	0x41, 0x49, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4c,
	0x41, 0x4d, 0x41, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41, 0x49, 0x10, 0x07, 0x22, 0x40, 0x0a,
	0x0f, 0x49, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x0d, 0x44, 0x62, 0x72, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x62, 0x72, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x62, 0x72, 0x78,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x62, 0x72,
	0x78, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x62, 0x72, 0x78, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x62, 0x72, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x64, 0x62, 0x72, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x22, 0x95, 0x01, 0x0a, 0x0e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x4f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x4b, 0x65, 0x79, 0x22, 0xa9, 0x02, 0x0a, 0x0b, 0x54, 0x65,
	0x73, 0x74, 0x47, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x6f, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x50, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x70, 0x22, 0x81, 0x03, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0d,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x47, 0x69,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x0c, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x47, 0x69, 0x74, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xee, 0x03, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6a, 0x69, 0x72, 0x61, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x69, 0x72, 0x61, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24,
	0x0a, 0x0e, 0x6a, 0x69, 0x72, 0x61, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x69, 0x72, 0x61, 0x48, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x69, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x69, 0x72, 0x61, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x6a, 0x69, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x69, 0x72, 0x61, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x2b, 0x0a, 0x12, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22,
	0x30, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4a, 0x49, 0x52, 0x41, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10,
	0x02, 0x22, 0x8b, 0x07, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x12, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07,
	0x61, 0x70, 0x69, 0x53, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x10, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x69, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x75, 0x72, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x6e, 0x76,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x45, 0x6e, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x65, 0x6e, 0x76, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x6f, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x43, 0x0a, 0x0f, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6d, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x69, 0x53, 0x70, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x22,
	0x94, 0x04, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x6a, 0x61, 0x76, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x70, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x67, 0x6f, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f,
	0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x67, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x0a, 0x63, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x0e, 0x64, 0x6f, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x0d, 0x64, 0x6f, 0x74, 0x6e, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x6f,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x76, 0x65, 0x6e, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x6d, 0x61, 0x76, 0x65, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x07, 0x41, 0x70, 0x69, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x69, 0x74,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x69, 0x74, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x6f, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xb3, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x60, 0x0a, 0x0b, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x53, 0x6c,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6c, 0x61,
	0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x73, 0x6c,
	0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6c,
	0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6c, 0x61, 0x63, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x0d, 0x4d, 0x73, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x73, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x6d, 0x73, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x6d, 0x73, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0e, 0x6d,
	0x73, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2b, 0x0a,
	0x12, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x73, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x10, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x77, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x77, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x0d, 0x63, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x29,
	0x0a, 0x11, 0x63, 0x77, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x77, 0x4c, 0x6f, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x77, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x77,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x02, 0x0a, 0x0e, 0x41, 0x77, 0x73, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x43,
	0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x41,
	0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x65, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x48,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x47, 0x70, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f,
	0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0f, 0x45, 0x64, 0x69, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x47, 0x70, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x2d, 0x0a, 0x12, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0xfb, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x6b,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6b, 0x69,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x43,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x17, 0x45, 0x64, 0x69, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x13,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xf1, 0x02, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x73, 0x76, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x73, 0x76,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x65,
	0x6e, 0x76, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x45, 0x6e, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x65, 0x6e, 0x76,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x38, 0x0a, 0x17, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x7c, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x3c,
	0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x31, 0x0a,
	0x17, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x2f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x25, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x74, 0x65, 0x73, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x74, 0x50, 0x72, 0x55,
	0x72, 0x6c, 0x32, 0xff, 0x09, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x73, 0x74, 0x47, 0x50, 0x54, 0x12,
	0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x20,
	0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72,
	0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x47, 0x70, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x47, 0x70, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x47, 0x70, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x72, 0x6f,
	0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x72,
	0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x44, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x6f, 0x6f,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e,
	0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0c, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0b,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x72, 0x6f,
	0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4e, 0x0a, 0x10, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x68, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x72,
	0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x6f, 0x6f, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x74, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e, 0x72, 0x6f, 0x6f,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x6f,
	0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1c, 0x2e,
	0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x6f,
	0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x72, 0x6f,
	0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x47, 0x50, 0x54, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x3b, 0x72, 0x6f, 0x6f, 0x73, 0x74, 0x47, 0x50, 0x54, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_roostGPT_proto_rawDescOnce sync.Once
	file_roostGPT_proto_rawDescData = file_roostGPT_proto_rawDesc
)

func file_roostGPT_proto_rawDescGZIP() []byte {
	file_roostGPT_proto_rawDescOnce.Do(func() {
		file_roostGPT_proto_rawDescData = protoimpl.X.CompressGZIP(file_roostGPT_proto_rawDescData)
	})
	return file_roostGPT_proto_rawDescData
}

var file_roostGPT_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_roostGPT_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_roostGPT_proto_goTypes = []any{
	(TestAiModelInfo_ModelType)(0),            // 0: roost.api.v1.TestAiModelInfo.ModelType
	(TestIntegrationInfo_IntegrationType)(0),  // 1: roost.api.v1.TestIntegrationInfo.IntegrationType
	(*Empty)(nil),                             // 2: roost.api.v1.Empty
	(*TitleKeyPair)(nil),                      // 3: roost.api.v1.TitleKeyPair
	(*FileContent)(nil),                       // 4: roost.api.v1.FileContent
	(*FileConfig)(nil),                        // 5: roost.api.v1.FileConfig
	(*TestGptEntity)(nil),                     // 6: roost.api.v1.TestGptEntity
	(*AddTestRequest)(nil),                    // 7: roost.api.v1.AddTestRequest
	(*TestAiModelInfo)(nil),                   // 8: roost.api.v1.TestAiModelInfo
	(*IpModelNamePair)(nil),                   // 9: roost.api.v1.IpModelNamePair
	(*DbrxModelInfo)(nil),                     // 10: roost.api.v1.DbrxModelInfo
	(*AzureModelInfo)(nil),                    // 11: roost.api.v1.AzureModelInfo
	(*TestGitInfo)(nil),                       // 12: roost.api.v1.TestGitInfo
	(*GitSourceRepo)(nil),                     // 13: roost.api.v1.GitSourceRepo
	(*GitTargetRepo)(nil),                     // 14: roost.api.v1.GitTargetRepo
	(*GitSelectedRepo)(nil),                   // 15: roost.api.v1.GitSelectedRepo
	(*TestIntegrationInfo)(nil),               // 16: roost.api.v1.TestIntegrationInfo
	(*TestAdditionalInfo)(nil),                // 17: roost.api.v1.TestAdditionalInfo
	(*DependencyVersions)(nil),                // 18: roost.api.v1.DependencyVersions
	(*ApiSpec)(nil),                           // 19: roost.api.v1.ApiSpec
	(*AppEnvConfig)(nil),                      // 20: roost.api.v1.AppEnvConfig
	(*EmailConfig)(nil),                       // 21: roost.api.v1.EmailConfig
	(*SlackConfig)(nil),                       // 22: roost.api.v1.SlackConfig
	(*MsTeamsConfig)(nil),                     // 23: roost.api.v1.MsTeamsConfig
	(*CloudWatchConfig)(nil),                  // 24: roost.api.v1.CloudWatchConfig
	(*AwsCredentials)(nil),                    // 25: roost.api.v1.AwsCredentials
	(*GetAllTestsRequest)(nil),                // 26: roost.api.v1.GetAllTestsRequest
	(*GetAllTestsResponse)(nil),               // 27: roost.api.v1.GetAllTestsResponse
	(*GetOneTestRequest)(nil),                 // 28: roost.api.v1.GetOneTestRequest
	(*EditTestRequest)(nil),                   // 29: roost.api.v1.EditTestRequest
	(*DeleteTestRequest)(nil),                 // 30: roost.api.v1.DeleteTestRequest
	(*TriggerTestRequest)(nil),                // 31: roost.api.v1.TriggerTestRequest
	(*GetAllEventsRequest)(nil),               // 32: roost.api.v1.GetAllEventsRequest
	(*GetAllEventsResponse)(nil),              // 33: roost.api.v1.GetAllEventsResponse
	(*Event)(nil),                             // 34: roost.api.v1.Event
	(*GetOneEventRequest)(nil),                // 35: roost.api.v1.GetOneEventRequest
	(*EditTriggerEventRequest)(nil),           // 36: roost.api.v1.EditTriggerEventRequest
	(*AbortTriggerRequest)(nil),               // 37: roost.api.v1.AbortTriggerRequest
	(*ExecuteTestRequest)(nil),                // 38: roost.api.v1.ExecuteTestRequest
	(*AbortTestExecuteRequest)(nil),           // 39: roost.api.v1.AbortTestExecuteRequest
	(*GetTestExecutionReportRequest)(nil),     // 40: roost.api.v1.GetTestExecutionReportRequest
	(*TestExecutionReport)(nil),               // 41: roost.api.v1.TestExecutionReport
	(*GetTestExecutionFileStatusRequest)(nil), // 42: roost.api.v1.GetTestExecutionFileStatusRequest
	(*TestExecutionFileStatus)(nil),           // 43: roost.api.v1.TestExecutionFileStatus
	(*GetLogsRequest)(nil),                    // 44: roost.api.v1.GetLogsRequest
	(*GetLogsResponse)(nil),                   // 45: roost.api.v1.GetLogsResponse
	(*RetriggerTestRequest)(nil),              // 46: roost.api.v1.RetriggerTestRequest
	(*timestamppb.Timestamp)(nil),             // 47: google.protobuf.Timestamp
}
var file_roostGPT_proto_depIdxs = []int32{
	47, // 0: roost.api.v1.TestGptEntity.created_on:type_name -> google.protobuf.Timestamp
	47, // 1: roost.api.v1.TestGptEntity.updated_on:type_name -> google.protobuf.Timestamp
	8,  // 2: roost.api.v1.AddTestRequest.ai_model_info:type_name -> roost.api.v1.TestAiModelInfo
	12, // 3: roost.api.v1.AddTestRequest.git_info:type_name -> roost.api.v1.TestGitInfo
	16, // 4: roost.api.v1.AddTestRequest.integration_info:type_name -> roost.api.v1.TestIntegrationInfo
	17, // 5: roost.api.v1.AddTestRequest.additional_info:type_name -> roost.api.v1.TestAdditionalInfo
	0,  // 6: roost.api.v1.TestAiModelInfo.selected_model:type_name -> roost.api.v1.TestAiModelInfo.ModelType
	3,  // 7: roost.api.v1.TestAiModelInfo.vertex_model:type_name -> roost.api.v1.TitleKeyPair
	9,  // 8: roost.api.v1.TestAiModelInfo.open_source_model_info:type_name -> roost.api.v1.IpModelNamePair
	3,  // 9: roost.api.v1.TestAiModelInfo.claude_model:type_name -> roost.api.v1.TitleKeyPair
	9,  // 10: roost.api.v1.TestAiModelInfo.star_chat_info:type_name -> roost.api.v1.IpModelNamePair
	9,  // 11: roost.api.v1.TestAiModelInfo.llama_model_info:type_name -> roost.api.v1.IpModelNamePair
	10, // 12: roost.api.v1.TestAiModelInfo.dbrx_info:type_name -> roost.api.v1.DbrxModelInfo
	11, // 13: roost.api.v1.TestAiModelInfo.azure_model_info:type_name -> roost.api.v1.AzureModelInfo
	13, // 14: roost.api.v1.TestGitInfo.source:type_name -> roost.api.v1.GitSourceRepo
	14, // 15: roost.api.v1.TestGitInfo.target:type_name -> roost.api.v1.GitTargetRepo
	15, // 16: roost.api.v1.GitSourceRepo.selected_repo:type_name -> roost.api.v1.GitSelectedRepo
	15, // 17: roost.api.v1.GitTargetRepo.selected_repo:type_name -> roost.api.v1.GitSelectedRepo
	1,  // 18: roost.api.v1.TestIntegrationInfo.type:type_name -> roost.api.v1.TestIntegrationInfo.IntegrationType
	4,  // 19: roost.api.v1.TestAdditionalInfo.log_file:type_name -> roost.api.v1.FileContent
	18, // 20: roost.api.v1.TestAdditionalInfo.dependency_versions:type_name -> roost.api.v1.DependencyVersions
	19, // 21: roost.api.v1.TestAdditionalInfo.api_spec:type_name -> roost.api.v1.ApiSpec
	19, // 22: roost.api.v1.TestAdditionalInfo.behavioural_test:type_name -> roost.api.v1.ApiSpec
	20, // 23: roost.api.v1.TestAdditionalInfo.env_config:type_name -> roost.api.v1.AppEnvConfig
	21, // 24: roost.api.v1.TestAdditionalInfo.email_config:type_name -> roost.api.v1.EmailConfig
	22, // 25: roost.api.v1.TestAdditionalInfo.slack_config:type_name -> roost.api.v1.SlackConfig
	23, // 26: roost.api.v1.TestAdditionalInfo.ms_teams_config:type_name -> roost.api.v1.MsTeamsConfig
	24, // 27: roost.api.v1.TestAdditionalInfo.cloudwatch_config:type_name -> roost.api.v1.CloudWatchConfig
	3,  // 28: roost.api.v1.DependencyVersions.java_version:type_name -> roost.api.v1.TitleKeyPair
	3,  // 29: roost.api.v1.DependencyVersions.python_version:type_name -> roost.api.v1.TitleKeyPair
	3,  // 30: roost.api.v1.DependencyVersions.node_version:type_name -> roost.api.v1.TitleKeyPair
	3,  // 31: roost.api.v1.DependencyVersions.go_version:type_name -> roost.api.v1.TitleKeyPair
	3,  // 32: roost.api.v1.DependencyVersions.cpp_version:type_name -> roost.api.v1.TitleKeyPair
	3,  // 33: roost.api.v1.DependencyVersions.dotnet_version:type_name -> roost.api.v1.TitleKeyPair
	3,  // 34: roost.api.v1.DependencyVersions.gradle_version:type_name -> roost.api.v1.TitleKeyPair
	3,  // 35: roost.api.v1.DependencyVersions.maven_version:type_name -> roost.api.v1.TitleKeyPair
	4,  // 36: roost.api.v1.ApiSpec.file_content:type_name -> roost.api.v1.FileContent
	5,  // 37: roost.api.v1.AppEnvConfig.file_details:type_name -> roost.api.v1.FileConfig
	3,  // 38: roost.api.v1.SlackConfig.slack_channel:type_name -> roost.api.v1.TitleKeyPair
	3,  // 39: roost.api.v1.MsTeamsConfig.ms_teams_name:type_name -> roost.api.v1.TitleKeyPair
	3,  // 40: roost.api.v1.MsTeamsConfig.ms_teams_channel:type_name -> roost.api.v1.TitleKeyPair
	25, // 41: roost.api.v1.CloudWatchConfig.cw_credentials:type_name -> roost.api.v1.AwsCredentials
	5,  // 42: roost.api.v1.AwsCredentials.credentials_file:type_name -> roost.api.v1.FileConfig
	6,  // 43: roost.api.v1.GetAllTestsResponse.tests:type_name -> roost.api.v1.TestGptEntity
	6,  // 44: roost.api.v1.EditTestRequest.test:type_name -> roost.api.v1.TestGptEntity
	34, // 45: roost.api.v1.GetAllEventsResponse.events:type_name -> roost.api.v1.Event
	47, // 46: roost.api.v1.Event.completion_time:type_name -> google.protobuf.Timestamp
	47, // 47: roost.api.v1.Event.modification_time:type_name -> google.protobuf.Timestamp
	34, // 48: roost.api.v1.EditTriggerEventRequest.event:type_name -> roost.api.v1.Event
	20, // 49: roost.api.v1.ExecuteTestRequest.env_config:type_name -> roost.api.v1.AppEnvConfig
	26, // 50: roost.api.v1.RoostGPT.GetAllTests:input_type -> roost.api.v1.GetAllTestsRequest
	7,  // 51: roost.api.v1.RoostGPT.AddTest:input_type -> roost.api.v1.AddTestRequest
	28, // 52: roost.api.v1.RoostGPT.GetOneTest:input_type -> roost.api.v1.GetOneTestRequest
	29, // 53: roost.api.v1.RoostGPT.EditTest:input_type -> roost.api.v1.EditTestRequest
	30, // 54: roost.api.v1.RoostGPT.DeleteTest:input_type -> roost.api.v1.DeleteTestRequest
	31, // 55: roost.api.v1.RoostGPT.TriggerTest:input_type -> roost.api.v1.TriggerTestRequest
	32, // 56: roost.api.v1.RoostGPT.GetAllEvents:input_type -> roost.api.v1.GetAllEventsRequest
	35, // 57: roost.api.v1.RoostGPT.GetOneEvent:input_type -> roost.api.v1.GetOneEventRequest
	36, // 58: roost.api.v1.RoostGPT.EditTriggerEvent:input_type -> roost.api.v1.EditTriggerEventRequest
	37, // 59: roost.api.v1.RoostGPT.AbortTrigger:input_type -> roost.api.v1.AbortTriggerRequest
	38, // 60: roost.api.v1.RoostGPT.ExecuteTest:input_type -> roost.api.v1.ExecuteTestRequest
	39, // 61: roost.api.v1.RoostGPT.AbortTestExecute:input_type -> roost.api.v1.AbortTestExecuteRequest
	40, // 62: roost.api.v1.RoostGPT.GetTestExecutionReport:input_type -> roost.api.v1.GetTestExecutionReportRequest
	42, // 63: roost.api.v1.RoostGPT.GetTestExecutionFileStatus:input_type -> roost.api.v1.GetTestExecutionFileStatusRequest
	44, // 64: roost.api.v1.RoostGPT.GetLogs:input_type -> roost.api.v1.GetLogsRequest
	46, // 65: roost.api.v1.RoostGPT.RetriggerTest:input_type -> roost.api.v1.RetriggerTestRequest
	27, // 66: roost.api.v1.RoostGPT.GetAllTests:output_type -> roost.api.v1.GetAllTestsResponse
	6,  // 67: roost.api.v1.RoostGPT.AddTest:output_type -> roost.api.v1.TestGptEntity
	6,  // 68: roost.api.v1.RoostGPT.GetOneTest:output_type -> roost.api.v1.TestGptEntity
	6,  // 69: roost.api.v1.RoostGPT.EditTest:output_type -> roost.api.v1.TestGptEntity
	2,  // 70: roost.api.v1.RoostGPT.DeleteTest:output_type -> roost.api.v1.Empty
	2,  // 71: roost.api.v1.RoostGPT.TriggerTest:output_type -> roost.api.v1.Empty
	33, // 72: roost.api.v1.RoostGPT.GetAllEvents:output_type -> roost.api.v1.GetAllEventsResponse
	34, // 73: roost.api.v1.RoostGPT.GetOneEvent:output_type -> roost.api.v1.Event
	2,  // 74: roost.api.v1.RoostGPT.EditTriggerEvent:output_type -> roost.api.v1.Empty
	2,  // 75: roost.api.v1.RoostGPT.AbortTrigger:output_type -> roost.api.v1.Empty
	2,  // 76: roost.api.v1.RoostGPT.ExecuteTest:output_type -> roost.api.v1.Empty
	2,  // 77: roost.api.v1.RoostGPT.AbortTestExecute:output_type -> roost.api.v1.Empty
	41, // 78: roost.api.v1.RoostGPT.GetTestExecutionReport:output_type -> roost.api.v1.TestExecutionReport
	43, // 79: roost.api.v1.RoostGPT.GetTestExecutionFileStatus:output_type -> roost.api.v1.TestExecutionFileStatus
	45, // 80: roost.api.v1.RoostGPT.GetLogs:output_type -> roost.api.v1.GetLogsResponse
	2,  // 81: roost.api.v1.RoostGPT.RetriggerTest:output_type -> roost.api.v1.Empty
	66, // [66:82] is the sub-list for method output_type
	50, // [50:66] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_roostGPT_proto_init() }
func file_roostGPT_proto_init() {
	if File_roostGPT_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_roostGPT_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_roostGPT_proto_goTypes,
		DependencyIndexes: file_roostGPT_proto_depIdxs,
		EnumInfos:         file_roostGPT_proto_enumTypes,
		MessageInfos:      file_roostGPT_proto_msgTypes,
	}.Build()
	File_roostGPT_proto = out.File
	file_roostGPT_proto_rawDesc = nil
	file_roostGPT_proto_goTypes = nil
	file_roostGPT_proto_depIdxs = nil
}

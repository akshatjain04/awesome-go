// Code generated by MockGen. DO NOT EDIT.
// Source: C:\var\tmp\Roost\RoostGPT\MiniProjects\1732865964\source\awesome-go\pkg\petstore\generated\petstore_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	generated "github.com/avelino/awesome-go/pkg/petstore/generated"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPetServiceClient is a mock of PetServiceClient interface.
type MockPetServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPetServiceClientMockRecorder
}

// MockPetServiceClientMockRecorder is the mock recorder for MockPetServiceClient.
type MockPetServiceClientMockRecorder struct {
	mock *MockPetServiceClient
}

// NewMockPetServiceClient creates a new mock instance.
func NewMockPetServiceClient(ctrl *gomock.Controller) *MockPetServiceClient {
	mock := &MockPetServiceClient{ctrl: ctrl}
	mock.recorder = &MockPetServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetServiceClient) EXPECT() *MockPetServiceClientMockRecorder {
	return m.recorder
}

// AddPet mocks base method.
func (m *MockPetServiceClient) AddPet(ctx context.Context, in *generated.Pet, opts ...grpc.CallOption) (*generated.Pet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPet", varargs...)
	ret0, _ := ret[0].(*generated.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPet indicates an expected call of AddPet.
func (mr *MockPetServiceClientMockRecorder) AddPet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPet", reflect.TypeOf((*MockPetServiceClient)(nil).AddPet), varargs...)
}

// DeletePet mocks base method.
func (m *MockPetServiceClient) DeletePet(ctx context.Context, in *generated.DeletePetRequest, opts ...grpc.CallOption) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePet", varargs...)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePet indicates an expected call of DeletePet.
func (mr *MockPetServiceClientMockRecorder) DeletePet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePet", reflect.TypeOf((*MockPetServiceClient)(nil).DeletePet), varargs...)
}

// FindPetsByStatus mocks base method.
func (m *MockPetServiceClient) FindPetsByStatus(ctx context.Context, in *generated.FindPetsByStatusRequest, opts ...grpc.CallOption) (*generated.PetList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindPetsByStatus", varargs...)
	ret0, _ := ret[0].(*generated.PetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPetsByStatus indicates an expected call of FindPetsByStatus.
func (mr *MockPetServiceClientMockRecorder) FindPetsByStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPetsByStatus", reflect.TypeOf((*MockPetServiceClient)(nil).FindPetsByStatus), varargs...)
}

// FindPetsByTags mocks base method.
func (m *MockPetServiceClient) FindPetsByTags(ctx context.Context, in *generated.FindPetsByTagsRequest, opts ...grpc.CallOption) (*generated.PetList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindPetsByTags", varargs...)
	ret0, _ := ret[0].(*generated.PetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPetsByTags indicates an expected call of FindPetsByTags.
func (mr *MockPetServiceClientMockRecorder) FindPetsByTags(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPetsByTags", reflect.TypeOf((*MockPetServiceClient)(nil).FindPetsByTags), varargs...)
}

// GetPetById mocks base method.
func (m *MockPetServiceClient) GetPetById(ctx context.Context, in *generated.PetByIdRequest, opts ...grpc.CallOption) (*generated.Pet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPetById", varargs...)
	ret0, _ := ret[0].(*generated.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetById indicates an expected call of GetPetById.
func (mr *MockPetServiceClientMockRecorder) GetPetById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetById", reflect.TypeOf((*MockPetServiceClient)(nil).GetPetById), varargs...)
}

// UpdatePet mocks base method.
func (m *MockPetServiceClient) UpdatePet(ctx context.Context, in *generated.Pet, opts ...grpc.CallOption) (*generated.Pet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePet", varargs...)
	ret0, _ := ret[0].(*generated.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePet indicates an expected call of UpdatePet.
func (mr *MockPetServiceClientMockRecorder) UpdatePet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePet", reflect.TypeOf((*MockPetServiceClient)(nil).UpdatePet), varargs...)
}

// UpdatePetWithForm mocks base method.
func (m *MockPetServiceClient) UpdatePetWithForm(ctx context.Context, in *generated.UpdatePetWithFormRequest, opts ...grpc.CallOption) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePetWithForm", varargs...)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePetWithForm indicates an expected call of UpdatePetWithForm.
func (mr *MockPetServiceClientMockRecorder) UpdatePetWithForm(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePetWithForm", reflect.TypeOf((*MockPetServiceClient)(nil).UpdatePetWithForm), varargs...)
}

// UploadImage mocks base method.
func (m *MockPetServiceClient) UploadImage(ctx context.Context, in *generated.UploadImageRequest, opts ...grpc.CallOption) (*generated.ApiResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadImage", varargs...)
	ret0, _ := ret[0].(*generated.ApiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockPetServiceClientMockRecorder) UploadImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockPetServiceClient)(nil).UploadImage), varargs...)
}

// MockPetServiceServer is a mock of PetServiceServer interface.
type MockPetServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPetServiceServerMockRecorder
}

// MockPetServiceServerMockRecorder is the mock recorder for MockPetServiceServer.
type MockPetServiceServerMockRecorder struct {
	mock *MockPetServiceServer
}

// NewMockPetServiceServer creates a new mock instance.
func NewMockPetServiceServer(ctrl *gomock.Controller) *MockPetServiceServer {
	mock := &MockPetServiceServer{ctrl: ctrl}
	mock.recorder = &MockPetServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetServiceServer) EXPECT() *MockPetServiceServerMockRecorder {
	return m.recorder
}

// AddPet mocks base method.
func (m *MockPetServiceServer) AddPet(arg0 context.Context, arg1 *generated.Pet) (*generated.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPet", arg0, arg1)
	ret0, _ := ret[0].(*generated.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPet indicates an expected call of AddPet.
func (mr *MockPetServiceServerMockRecorder) AddPet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPet", reflect.TypeOf((*MockPetServiceServer)(nil).AddPet), arg0, arg1)
}

// DeletePet mocks base method.
func (m *MockPetServiceServer) DeletePet(arg0 context.Context, arg1 *generated.DeletePetRequest) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePet", arg0, arg1)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePet indicates an expected call of DeletePet.
func (mr *MockPetServiceServerMockRecorder) DeletePet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePet", reflect.TypeOf((*MockPetServiceServer)(nil).DeletePet), arg0, arg1)
}

// FindPetsByStatus mocks base method.
func (m *MockPetServiceServer) FindPetsByStatus(arg0 context.Context, arg1 *generated.FindPetsByStatusRequest) (*generated.PetList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPetsByStatus", arg0, arg1)
	ret0, _ := ret[0].(*generated.PetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPetsByStatus indicates an expected call of FindPetsByStatus.
func (mr *MockPetServiceServerMockRecorder) FindPetsByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPetsByStatus", reflect.TypeOf((*MockPetServiceServer)(nil).FindPetsByStatus), arg0, arg1)
}

// FindPetsByTags mocks base method.
func (m *MockPetServiceServer) FindPetsByTags(arg0 context.Context, arg1 *generated.FindPetsByTagsRequest) (*generated.PetList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPetsByTags", arg0, arg1)
	ret0, _ := ret[0].(*generated.PetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPetsByTags indicates an expected call of FindPetsByTags.
func (mr *MockPetServiceServerMockRecorder) FindPetsByTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPetsByTags", reflect.TypeOf((*MockPetServiceServer)(nil).FindPetsByTags), arg0, arg1)
}

// GetPetById mocks base method.
func (m *MockPetServiceServer) GetPetById(arg0 context.Context, arg1 *generated.PetByIdRequest) (*generated.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetById", arg0, arg1)
	ret0, _ := ret[0].(*generated.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetById indicates an expected call of GetPetById.
func (mr *MockPetServiceServerMockRecorder) GetPetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetById", reflect.TypeOf((*MockPetServiceServer)(nil).GetPetById), arg0, arg1)
}

// UpdatePet mocks base method.
func (m *MockPetServiceServer) UpdatePet(arg0 context.Context, arg1 *generated.Pet) (*generated.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePet", arg0, arg1)
	ret0, _ := ret[0].(*generated.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePet indicates an expected call of UpdatePet.
func (mr *MockPetServiceServerMockRecorder) UpdatePet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePet", reflect.TypeOf((*MockPetServiceServer)(nil).UpdatePet), arg0, arg1)
}

// UpdatePetWithForm mocks base method.
func (m *MockPetServiceServer) UpdatePetWithForm(arg0 context.Context, arg1 *generated.UpdatePetWithFormRequest) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePetWithForm", arg0, arg1)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePetWithForm indicates an expected call of UpdatePetWithForm.
func (mr *MockPetServiceServerMockRecorder) UpdatePetWithForm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePetWithForm", reflect.TypeOf((*MockPetServiceServer)(nil).UpdatePetWithForm), arg0, arg1)
}

// UploadImage mocks base method.
func (m *MockPetServiceServer) UploadImage(arg0 context.Context, arg1 *generated.UploadImageRequest) (*generated.ApiResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", arg0, arg1)
	ret0, _ := ret[0].(*generated.ApiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockPetServiceServerMockRecorder) UploadImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockPetServiceServer)(nil).UploadImage), arg0, arg1)
}

// mustEmbedUnimplementedPetServiceServer mocks base method.
func (m *MockPetServiceServer) mustEmbedUnimplementedPetServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPetServiceServer")
}

// mustEmbedUnimplementedPetServiceServer indicates an expected call of mustEmbedUnimplementedPetServiceServer.
func (mr *MockPetServiceServerMockRecorder) mustEmbedUnimplementedPetServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPetServiceServer", reflect.TypeOf((*MockPetServiceServer)(nil).mustEmbedUnimplementedPetServiceServer))
}

// MockUnsafePetServiceServer is a mock of UnsafePetServiceServer interface.
type MockUnsafePetServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePetServiceServerMockRecorder
}

// MockUnsafePetServiceServerMockRecorder is the mock recorder for MockUnsafePetServiceServer.
type MockUnsafePetServiceServerMockRecorder struct {
	mock *MockUnsafePetServiceServer
}

// NewMockUnsafePetServiceServer creates a new mock instance.
func NewMockUnsafePetServiceServer(ctrl *gomock.Controller) *MockUnsafePetServiceServer {
	mock := &MockUnsafePetServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePetServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePetServiceServer) EXPECT() *MockUnsafePetServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPetServiceServer mocks base method.
func (m *MockUnsafePetServiceServer) mustEmbedUnimplementedPetServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPetServiceServer")
}

// mustEmbedUnimplementedPetServiceServer indicates an expected call of mustEmbedUnimplementedPetServiceServer.
func (mr *MockUnsafePetServiceServerMockRecorder) mustEmbedUnimplementedPetServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPetServiceServer", reflect.TypeOf((*MockUnsafePetServiceServer)(nil).mustEmbedUnimplementedPetServiceServer))
}

// MockStoreServiceClient is a mock of StoreServiceClient interface.
type MockStoreServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStoreServiceClientMockRecorder
}

// MockStoreServiceClientMockRecorder is the mock recorder for MockStoreServiceClient.
type MockStoreServiceClientMockRecorder struct {
	mock *MockStoreServiceClient
}

// NewMockStoreServiceClient creates a new mock instance.
func NewMockStoreServiceClient(ctrl *gomock.Controller) *MockStoreServiceClient {
	mock := &MockStoreServiceClient{ctrl: ctrl}
	mock.recorder = &MockStoreServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreServiceClient) EXPECT() *MockStoreServiceClientMockRecorder {
	return m.recorder
}

// DeleteOrder mocks base method.
func (m *MockStoreServiceClient) DeleteOrder(ctx context.Context, in *generated.OrderByIdRequest, opts ...grpc.CallOption) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrder", varargs...)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockStoreServiceClientMockRecorder) DeleteOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockStoreServiceClient)(nil).DeleteOrder), varargs...)
}

// GetInventory mocks base method.
func (m *MockStoreServiceClient) GetInventory(ctx context.Context, in *generated.Empty, opts ...grpc.CallOption) (*generated.InventoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInventory", varargs...)
	ret0, _ := ret[0].(*generated.InventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockStoreServiceClientMockRecorder) GetInventory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockStoreServiceClient)(nil).GetInventory), varargs...)
}

// GetOrderById mocks base method.
func (m *MockStoreServiceClient) GetOrderById(ctx context.Context, in *generated.OrderByIdRequest, opts ...grpc.CallOption) (*generated.Order, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrderById", varargs...)
	ret0, _ := ret[0].(*generated.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockStoreServiceClientMockRecorder) GetOrderById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockStoreServiceClient)(nil).GetOrderById), varargs...)
}

// PlaceOrder mocks base method.
func (m *MockStoreServiceClient) PlaceOrder(ctx context.Context, in *generated.Order, opts ...grpc.CallOption) (*generated.Order, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PlaceOrder", varargs...)
	ret0, _ := ret[0].(*generated.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceOrder indicates an expected call of PlaceOrder.
func (mr *MockStoreServiceClientMockRecorder) PlaceOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrder", reflect.TypeOf((*MockStoreServiceClient)(nil).PlaceOrder), varargs...)
}

// MockStoreServiceServer is a mock of StoreServiceServer interface.
type MockStoreServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockStoreServiceServerMockRecorder
}

// MockStoreServiceServerMockRecorder is the mock recorder for MockStoreServiceServer.
type MockStoreServiceServerMockRecorder struct {
	mock *MockStoreServiceServer
}

// NewMockStoreServiceServer creates a new mock instance.
func NewMockStoreServiceServer(ctrl *gomock.Controller) *MockStoreServiceServer {
	mock := &MockStoreServiceServer{ctrl: ctrl}
	mock.recorder = &MockStoreServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreServiceServer) EXPECT() *MockStoreServiceServerMockRecorder {
	return m.recorder
}

// DeleteOrder mocks base method.
func (m *MockStoreServiceServer) DeleteOrder(arg0 context.Context, arg1 *generated.OrderByIdRequest) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0, arg1)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockStoreServiceServerMockRecorder) DeleteOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockStoreServiceServer)(nil).DeleteOrder), arg0, arg1)
}

// GetInventory mocks base method.
func (m *MockStoreServiceServer) GetInventory(arg0 context.Context, arg1 *generated.Empty) (*generated.InventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", arg0, arg1)
	ret0, _ := ret[0].(*generated.InventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockStoreServiceServerMockRecorder) GetInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockStoreServiceServer)(nil).GetInventory), arg0, arg1)
}

// GetOrderById mocks base method.
func (m *MockStoreServiceServer) GetOrderById(arg0 context.Context, arg1 *generated.OrderByIdRequest) (*generated.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", arg0, arg1)
	ret0, _ := ret[0].(*generated.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockStoreServiceServerMockRecorder) GetOrderById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockStoreServiceServer)(nil).GetOrderById), arg0, arg1)
}

// PlaceOrder mocks base method.
func (m *MockStoreServiceServer) PlaceOrder(arg0 context.Context, arg1 *generated.Order) (*generated.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceOrder", arg0, arg1)
	ret0, _ := ret[0].(*generated.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceOrder indicates an expected call of PlaceOrder.
func (mr *MockStoreServiceServerMockRecorder) PlaceOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrder", reflect.TypeOf((*MockStoreServiceServer)(nil).PlaceOrder), arg0, arg1)
}

// mustEmbedUnimplementedStoreServiceServer mocks base method.
func (m *MockStoreServiceServer) mustEmbedUnimplementedStoreServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStoreServiceServer")
}

// mustEmbedUnimplementedStoreServiceServer indicates an expected call of mustEmbedUnimplementedStoreServiceServer.
func (mr *MockStoreServiceServerMockRecorder) mustEmbedUnimplementedStoreServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStoreServiceServer", reflect.TypeOf((*MockStoreServiceServer)(nil).mustEmbedUnimplementedStoreServiceServer))
}

// MockUnsafeStoreServiceServer is a mock of UnsafeStoreServiceServer interface.
type MockUnsafeStoreServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStoreServiceServerMockRecorder
}

// MockUnsafeStoreServiceServerMockRecorder is the mock recorder for MockUnsafeStoreServiceServer.
type MockUnsafeStoreServiceServerMockRecorder struct {
	mock *MockUnsafeStoreServiceServer
}

// NewMockUnsafeStoreServiceServer creates a new mock instance.
func NewMockUnsafeStoreServiceServer(ctrl *gomock.Controller) *MockUnsafeStoreServiceServer {
	mock := &MockUnsafeStoreServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStoreServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStoreServiceServer) EXPECT() *MockUnsafeStoreServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStoreServiceServer mocks base method.
func (m *MockUnsafeStoreServiceServer) mustEmbedUnimplementedStoreServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStoreServiceServer")
}

// mustEmbedUnimplementedStoreServiceServer indicates an expected call of mustEmbedUnimplementedStoreServiceServer.
func (mr *MockUnsafeStoreServiceServerMockRecorder) mustEmbedUnimplementedStoreServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStoreServiceServer", reflect.TypeOf((*MockUnsafeStoreServiceServer)(nil).mustEmbedUnimplementedStoreServiceServer))
}

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServiceClient) CreateUser(ctx context.Context, in *generated.User, opts ...grpc.CallOption) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceClientMockRecorder) CreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceClient)(nil).CreateUser), varargs...)
}

// CreateUsersWithArray mocks base method.
func (m *MockUserServiceClient) CreateUsersWithArray(ctx context.Context, in *generated.UserList, opts ...grpc.CallOption) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUsersWithArray", varargs...)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsersWithArray indicates an expected call of CreateUsersWithArray.
func (mr *MockUserServiceClientMockRecorder) CreateUsersWithArray(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsersWithArray", reflect.TypeOf((*MockUserServiceClient)(nil).CreateUsersWithArray), varargs...)
}

// CreateUsersWithList mocks base method.
func (m *MockUserServiceClient) CreateUsersWithList(ctx context.Context, in *generated.UserList, opts ...grpc.CallOption) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUsersWithList", varargs...)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsersWithList indicates an expected call of CreateUsersWithList.
func (mr *MockUserServiceClientMockRecorder) CreateUsersWithList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsersWithList", reflect.TypeOf((*MockUserServiceClient)(nil).CreateUsersWithList), varargs...)
}

// DeleteUser mocks base method.
func (m *MockUserServiceClient) DeleteUser(ctx context.Context, in *generated.UserByNameRequest, opts ...grpc.CallOption) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceClientMockRecorder) DeleteUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServiceClient)(nil).DeleteUser), varargs...)
}

// GetUserByName mocks base method.
func (m *MockUserServiceClient) GetUserByName(ctx context.Context, in *generated.UserByNameRequest, opts ...grpc.CallOption) (*generated.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByName", varargs...)
	ret0, _ := ret[0].(*generated.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserServiceClientMockRecorder) GetUserByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserByName), varargs...)
}

// Login mocks base method.
func (m *MockUserServiceClient) Login(ctx context.Context, in *generated.LoginRequest, opts ...grpc.CallOption) (*generated.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*generated.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceClient)(nil).Login), varargs...)
}

// Logout mocks base method.
func (m *MockUserServiceClient) Logout(ctx context.Context, in *generated.Empty, opts ...grpc.CallOption) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Logout", varargs...)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockUserServiceClientMockRecorder) Logout(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserServiceClient)(nil).Logout), varargs...)
}

// UpdateUser mocks base method.
func (m *MockUserServiceClient) UpdateUser(ctx context.Context, in *generated.UpdateUserRequest, opts ...grpc.CallOption) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceClientMockRecorder) UpdateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateUser), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServiceServer) CreateUser(arg0 context.Context, arg1 *generated.User) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceServerMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceServer)(nil).CreateUser), arg0, arg1)
}

// CreateUsersWithArray mocks base method.
func (m *MockUserServiceServer) CreateUsersWithArray(arg0 context.Context, arg1 *generated.UserList) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsersWithArray", arg0, arg1)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsersWithArray indicates an expected call of CreateUsersWithArray.
func (mr *MockUserServiceServerMockRecorder) CreateUsersWithArray(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsersWithArray", reflect.TypeOf((*MockUserServiceServer)(nil).CreateUsersWithArray), arg0, arg1)
}

// CreateUsersWithList mocks base method.
func (m *MockUserServiceServer) CreateUsersWithList(arg0 context.Context, arg1 *generated.UserList) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsersWithList", arg0, arg1)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsersWithList indicates an expected call of CreateUsersWithList.
func (mr *MockUserServiceServerMockRecorder) CreateUsersWithList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsersWithList", reflect.TypeOf((*MockUserServiceServer)(nil).CreateUsersWithList), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockUserServiceServer) DeleteUser(arg0 context.Context, arg1 *generated.UserByNameRequest) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceServerMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServiceServer)(nil).DeleteUser), arg0, arg1)
}

// GetUserByName mocks base method.
func (m *MockUserServiceServer) GetUserByName(arg0 context.Context, arg1 *generated.UserByNameRequest) (*generated.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(*generated.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserServiceServerMockRecorder) GetUserByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserByName), arg0, arg1)
}

// Login mocks base method.
func (m *MockUserServiceServer) Login(arg0 context.Context, arg1 *generated.LoginRequest) (*generated.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*generated.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceServer)(nil).Login), arg0, arg1)
}

// Logout mocks base method.
func (m *MockUserServiceServer) Logout(arg0 context.Context, arg1 *generated.Empty) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockUserServiceServerMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserServiceServer)(nil).Logout), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserServiceServer) UpdateUser(arg0 context.Context, arg1 *generated.UpdateUserRequest) (*generated.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*generated.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceServerMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServiceServer)(nil).UpdateUser), arg0, arg1)
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockUnsafeUserServiceServer is a mock of UnsafeUserServiceServer interface.
type MockUnsafeUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServiceServerMockRecorder
}

// MockUnsafeUserServiceServerMockRecorder is the mock recorder for MockUnsafeUserServiceServer.
type MockUnsafeUserServiceServerMockRecorder struct {
	mock *MockUnsafeUserServiceServer
}

// NewMockUnsafeUserServiceServer creates a new mock instance.
func NewMockUnsafeUserServiceServer(ctrl *gomock.Controller) *MockUnsafeUserServiceServer {
	mock := &MockUnsafeUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServiceServer) EXPECT() *MockUnsafeUserServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUnsafeUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUnsafeUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUnsafeUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

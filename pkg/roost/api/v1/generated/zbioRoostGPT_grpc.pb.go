// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: zbioRoostGPT.proto

package roostGPT

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoostGPT_GetAllTests_FullMethodName                = "/roost.api.v1.RoostGPT/GetAllTests"
	RoostGPT_AddTest_FullMethodName                    = "/roost.api.v1.RoostGPT/AddTest"
	RoostGPT_GetOneTest_FullMethodName                 = "/roost.api.v1.RoostGPT/GetOneTest"
	RoostGPT_EditTest_FullMethodName                   = "/roost.api.v1.RoostGPT/EditTest"
	RoostGPT_DeleteTest_FullMethodName                 = "/roost.api.v1.RoostGPT/DeleteTest"
	RoostGPT_TriggerTest_FullMethodName                = "/roost.api.v1.RoostGPT/TriggerTest"
	RoostGPT_GetAllEvents_FullMethodName               = "/roost.api.v1.RoostGPT/GetAllEvents"
	RoostGPT_GetOneEvent_FullMethodName                = "/roost.api.v1.RoostGPT/GetOneEvent"
	RoostGPT_EditTriggerEvent_FullMethodName           = "/roost.api.v1.RoostGPT/EditTriggerEvent"
	RoostGPT_AbortTrigger_FullMethodName               = "/roost.api.v1.RoostGPT/AbortTrigger"
	RoostGPT_ExecuteTest_FullMethodName                = "/roost.api.v1.RoostGPT/ExecuteTest"
	RoostGPT_AbortTestExecute_FullMethodName           = "/roost.api.v1.RoostGPT/AbortTestExecute"
	RoostGPT_GetTestExecutionReport_FullMethodName     = "/roost.api.v1.RoostGPT/GetTestExecutionReport"
	RoostGPT_GetTestExecutionFileStatus_FullMethodName = "/roost.api.v1.RoostGPT/GetTestExecutionFileStatus"
	RoostGPT_GetLogs_FullMethodName                    = "/roost.api.v1.RoostGPT/GetLogs"
	RoostGPT_RetriggerTest_FullMethodName              = "/roost.api.v1.RoostGPT/RetriggerTest"
)

// RoostGPTClient is the client API for RoostGPT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type RoostGPTClient interface {
	// Test operations
	GetAllTests(ctx context.Context, in *GetAllTestsRequest, opts ...grpc.CallOption) (*GetAllTestsResponse, error)
	AddTest(ctx context.Context, in *AddTestRequest, opts ...grpc.CallOption) (*TestGptEntity, error)
	GetOneTest(ctx context.Context, in *GetOneTestRequest, opts ...grpc.CallOption) (*TestGptEntity, error)
	EditTest(ctx context.Context, in *EditTestRequest, opts ...grpc.CallOption) (*TestGptEntity, error)
	DeleteTest(ctx context.Context, in *DeleteTestRequest, opts ...grpc.CallOption) (*Empty, error)
	TriggerTest(ctx context.Context, in *TriggerTestRequest, opts ...grpc.CallOption) (*Empty, error)
	// Event operations
	GetAllEvents(ctx context.Context, in *GetAllEventsRequest, opts ...grpc.CallOption) (*GetAllEventsResponse, error)
	GetOneEvent(ctx context.Context, in *GetOneEventRequest, opts ...grpc.CallOption) (*Event, error)
	EditTriggerEvent(ctx context.Context, in *EditTriggerEventRequest, opts ...grpc.CallOption) (*Empty, error)
	AbortTrigger(ctx context.Context, in *AbortTriggerRequest, opts ...grpc.CallOption) (*Empty, error)
	ExecuteTest(ctx context.Context, in *ExecuteTestRequest, opts ...grpc.CallOption) (*Empty, error)
	AbortTestExecute(ctx context.Context, in *AbortTestExecuteRequest, opts ...grpc.CallOption) (*Empty, error)
	GetTestExecutionReport(ctx context.Context, in *GetTestExecutionReportRequest, opts ...grpc.CallOption) (*TestExecutionReport, error)
	GetTestExecutionFileStatus(ctx context.Context, in *GetTestExecutionFileStatusRequest, opts ...grpc.CallOption) (*TestExecutionFileStatus, error)
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
	RetriggerTest(ctx context.Context, in *RetriggerTestRequest, opts ...grpc.CallOption) (*Empty, error)
}

type roostGPTClient struct {
	cc grpc.ClientConnInterface
}

func NewRoostGPTClient(cc grpc.ClientConnInterface) RoostGPTClient {
	return &roostGPTClient{cc}
}

func (c *roostGPTClient) GetAllTests(ctx context.Context, in *GetAllTestsRequest, opts ...grpc.CallOption) (*GetAllTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTestsResponse)
	err := c.cc.Invoke(ctx, RoostGPT_GetAllTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) AddTest(ctx context.Context, in *AddTestRequest, opts ...grpc.CallOption) (*TestGptEntity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestGptEntity)
	err := c.cc.Invoke(ctx, RoostGPT_AddTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) GetOneTest(ctx context.Context, in *GetOneTestRequest, opts ...grpc.CallOption) (*TestGptEntity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestGptEntity)
	err := c.cc.Invoke(ctx, RoostGPT_GetOneTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) EditTest(ctx context.Context, in *EditTestRequest, opts ...grpc.CallOption) (*TestGptEntity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestGptEntity)
	err := c.cc.Invoke(ctx, RoostGPT_EditTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) DeleteTest(ctx context.Context, in *DeleteTestRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoostGPT_DeleteTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) TriggerTest(ctx context.Context, in *TriggerTestRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoostGPT_TriggerTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) GetAllEvents(ctx context.Context, in *GetAllEventsRequest, opts ...grpc.CallOption) (*GetAllEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllEventsResponse)
	err := c.cc.Invoke(ctx, RoostGPT_GetAllEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) GetOneEvent(ctx context.Context, in *GetOneEventRequest, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, RoostGPT_GetOneEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) EditTriggerEvent(ctx context.Context, in *EditTriggerEventRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoostGPT_EditTriggerEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) AbortTrigger(ctx context.Context, in *AbortTriggerRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoostGPT_AbortTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) ExecuteTest(ctx context.Context, in *ExecuteTestRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoostGPT_ExecuteTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) AbortTestExecute(ctx context.Context, in *AbortTestExecuteRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoostGPT_AbortTestExecute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) GetTestExecutionReport(ctx context.Context, in *GetTestExecutionReportRequest, opts ...grpc.CallOption) (*TestExecutionReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestExecutionReport)
	err := c.cc.Invoke(ctx, RoostGPT_GetTestExecutionReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) GetTestExecutionFileStatus(ctx context.Context, in *GetTestExecutionFileStatusRequest, opts ...grpc.CallOption) (*TestExecutionFileStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestExecutionFileStatus)
	err := c.cc.Invoke(ctx, RoostGPT_GetTestExecutionFileStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, RoostGPT_GetLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roostGPTClient) RetriggerTest(ctx context.Context, in *RetriggerTestRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoostGPT_RetriggerTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoostGPTServer is the server API for RoostGPT service.
// All implementations must embed UnimplementedRoostGPTServer
// for forward compatibility.
//
// Service definition
type RoostGPTServer interface {
	// Test operations
	GetAllTests(context.Context, *GetAllTestsRequest) (*GetAllTestsResponse, error)
	AddTest(context.Context, *AddTestRequest) (*TestGptEntity, error)
	GetOneTest(context.Context, *GetOneTestRequest) (*TestGptEntity, error)
	EditTest(context.Context, *EditTestRequest) (*TestGptEntity, error)
	DeleteTest(context.Context, *DeleteTestRequest) (*Empty, error)
	TriggerTest(context.Context, *TriggerTestRequest) (*Empty, error)
	// Event operations
	GetAllEvents(context.Context, *GetAllEventsRequest) (*GetAllEventsResponse, error)
	GetOneEvent(context.Context, *GetOneEventRequest) (*Event, error)
	EditTriggerEvent(context.Context, *EditTriggerEventRequest) (*Empty, error)
	AbortTrigger(context.Context, *AbortTriggerRequest) (*Empty, error)
	ExecuteTest(context.Context, *ExecuteTestRequest) (*Empty, error)
	AbortTestExecute(context.Context, *AbortTestExecuteRequest) (*Empty, error)
	GetTestExecutionReport(context.Context, *GetTestExecutionReportRequest) (*TestExecutionReport, error)
	GetTestExecutionFileStatus(context.Context, *GetTestExecutionFileStatusRequest) (*TestExecutionFileStatus, error)
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	RetriggerTest(context.Context, *RetriggerTestRequest) (*Empty, error)
	mustEmbedUnimplementedRoostGPTServer()
}

// UnimplementedRoostGPTServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoostGPTServer struct{}

func (UnimplementedRoostGPTServer) GetAllTests(context.Context, *GetAllTestsRequest) (*GetAllTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTests not implemented")
}
func (UnimplementedRoostGPTServer) AddTest(context.Context, *AddTestRequest) (*TestGptEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTest not implemented")
}
func (UnimplementedRoostGPTServer) GetOneTest(context.Context, *GetOneTestRequest) (*TestGptEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneTest not implemented")
}
func (UnimplementedRoostGPTServer) EditTest(context.Context, *EditTestRequest) (*TestGptEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTest not implemented")
}
func (UnimplementedRoostGPTServer) DeleteTest(context.Context, *DeleteTestRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTest not implemented")
}
func (UnimplementedRoostGPTServer) TriggerTest(context.Context, *TriggerTestRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerTest not implemented")
}
func (UnimplementedRoostGPTServer) GetAllEvents(context.Context, *GetAllEventsRequest) (*GetAllEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEvents not implemented")
}
func (UnimplementedRoostGPTServer) GetOneEvent(context.Context, *GetOneEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneEvent not implemented")
}
func (UnimplementedRoostGPTServer) EditTriggerEvent(context.Context, *EditTriggerEventRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTriggerEvent not implemented")
}
func (UnimplementedRoostGPTServer) AbortTrigger(context.Context, *AbortTriggerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortTrigger not implemented")
}
func (UnimplementedRoostGPTServer) ExecuteTest(context.Context, *ExecuteTestRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTest not implemented")
}
func (UnimplementedRoostGPTServer) AbortTestExecute(context.Context, *AbortTestExecuteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortTestExecute not implemented")
}
func (UnimplementedRoostGPTServer) GetTestExecutionReport(context.Context, *GetTestExecutionReportRequest) (*TestExecutionReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestExecutionReport not implemented")
}
func (UnimplementedRoostGPTServer) GetTestExecutionFileStatus(context.Context, *GetTestExecutionFileStatusRequest) (*TestExecutionFileStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestExecutionFileStatus not implemented")
}
func (UnimplementedRoostGPTServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedRoostGPTServer) RetriggerTest(context.Context, *RetriggerTestRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetriggerTest not implemented")
}
func (UnimplementedRoostGPTServer) mustEmbedUnimplementedRoostGPTServer() {}
func (UnimplementedRoostGPTServer) testEmbeddedByValue()                  {}

// UnsafeRoostGPTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoostGPTServer will
// result in compilation errors.
type UnsafeRoostGPTServer interface {
	mustEmbedUnimplementedRoostGPTServer()
}

func RegisterRoostGPTServer(s grpc.ServiceRegistrar, srv RoostGPTServer) {
	// If the following call pancis, it indicates UnimplementedRoostGPTServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoostGPT_ServiceDesc, srv)
}

func _RoostGPT_GetAllTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).GetAllTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_GetAllTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).GetAllTests(ctx, req.(*GetAllTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_AddTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).AddTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_AddTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).AddTest(ctx, req.(*AddTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_GetOneTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).GetOneTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_GetOneTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).GetOneTest(ctx, req.(*GetOneTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_EditTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).EditTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_EditTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).EditTest(ctx, req.(*EditTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_DeleteTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).DeleteTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_DeleteTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).DeleteTest(ctx, req.(*DeleteTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_TriggerTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).TriggerTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_TriggerTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).TriggerTest(ctx, req.(*TriggerTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_GetAllEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).GetAllEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_GetAllEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).GetAllEvents(ctx, req.(*GetAllEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_GetOneEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).GetOneEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_GetOneEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).GetOneEvent(ctx, req.(*GetOneEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_EditTriggerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTriggerEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).EditTriggerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_EditTriggerEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).EditTriggerEvent(ctx, req.(*EditTriggerEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_AbortTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).AbortTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_AbortTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).AbortTrigger(ctx, req.(*AbortTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_ExecuteTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).ExecuteTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_ExecuteTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).ExecuteTest(ctx, req.(*ExecuteTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_AbortTestExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortTestExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).AbortTestExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_AbortTestExecute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).AbortTestExecute(ctx, req.(*AbortTestExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_GetTestExecutionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestExecutionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).GetTestExecutionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_GetTestExecutionReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).GetTestExecutionReport(ctx, req.(*GetTestExecutionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_GetTestExecutionFileStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestExecutionFileStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).GetTestExecutionFileStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_GetTestExecutionFileStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).GetTestExecutionFileStatus(ctx, req.(*GetTestExecutionFileStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoostGPT_RetriggerTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetriggerTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoostGPTServer).RetriggerTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoostGPT_RetriggerTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoostGPTServer).RetriggerTest(ctx, req.(*RetriggerTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoostGPT_ServiceDesc is the grpc.ServiceDesc for RoostGPT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoostGPT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roost.api.v1.RoostGPT",
	HandlerType: (*RoostGPTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTests",
			Handler:    _RoostGPT_GetAllTests_Handler,
		},
		{
			MethodName: "AddTest",
			Handler:    _RoostGPT_AddTest_Handler,
		},
		{
			MethodName: "GetOneTest",
			Handler:    _RoostGPT_GetOneTest_Handler,
		},
		{
			MethodName: "EditTest",
			Handler:    _RoostGPT_EditTest_Handler,
		},
		{
			MethodName: "DeleteTest",
			Handler:    _RoostGPT_DeleteTest_Handler,
		},
		{
			MethodName: "TriggerTest",
			Handler:    _RoostGPT_TriggerTest_Handler,
		},
		{
			MethodName: "GetAllEvents",
			Handler:    _RoostGPT_GetAllEvents_Handler,
		},
		{
			MethodName: "GetOneEvent",
			Handler:    _RoostGPT_GetOneEvent_Handler,
		},
		{
			MethodName: "EditTriggerEvent",
			Handler:    _RoostGPT_EditTriggerEvent_Handler,
		},
		{
			MethodName: "AbortTrigger",
			Handler:    _RoostGPT_AbortTrigger_Handler,
		},
		{
			MethodName: "ExecuteTest",
			Handler:    _RoostGPT_ExecuteTest_Handler,
		},
		{
			MethodName: "AbortTestExecute",
			Handler:    _RoostGPT_AbortTestExecute_Handler,
		},
		{
			MethodName: "GetTestExecutionReport",
			Handler:    _RoostGPT_GetTestExecutionReport_Handler,
		},
		{
			MethodName: "GetTestExecutionFileStatus",
			Handler:    _RoostGPT_GetTestExecutionFileStatus_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _RoostGPT_GetLogs_Handler,
		},
		{
			MethodName: "RetriggerTest",
			Handler:    _RoostGPT_RetriggerTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zbioRoostGPT.proto",
}
